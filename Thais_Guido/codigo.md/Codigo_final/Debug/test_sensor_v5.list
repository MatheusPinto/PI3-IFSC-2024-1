
test_sensor_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800363c  0800363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003640  08003640  00004640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003644  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000068  080036ac  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080036ac  00005244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eea  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a28  00000000  00000000  0000df7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0000f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c5  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018059  00000000  00000000  00010b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a707  00000000  00000000  00028bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899b5  00000000  00000000  000332f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bccaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  000bccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000bfdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080035b8 	.word	0x080035b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080035b8 	.word	0x080035b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcb2 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e2 	bl	8000320 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f86c 	bl	8000238 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Sensor 1 Config */
  sr04.trig_port = GPIOA;
 8000160:	4b0e      	ldr	r3, [pc, #56]	@ (800019c <main+0x50>)
 8000162:	4a0f      	ldr	r2, [pc, #60]	@ (80001a0 <main+0x54>)
 8000164:	601a      	str	r2, [r3, #0]
  sr04.trig_pin = GPIO_PIN_9;
 8000166:	4b0d      	ldr	r3, [pc, #52]	@ (800019c <main+0x50>)
 8000168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800016c:	809a      	strh	r2, [r3, #4]
  sr04.echo_htim = &htim1;
 800016e:	4b0b      	ldr	r3, [pc, #44]	@ (800019c <main+0x50>)
 8000170:	4a0c      	ldr	r2, [pc, #48]	@ (80001a4 <main+0x58>)
 8000172:	609a      	str	r2, [r3, #8]
  sr04.echo_channel = TIM_CHANNEL_1;
 8000174:	4b09      	ldr	r3, [pc, #36]	@ (800019c <main+0x50>)
 8000176:	2200      	movs	r2, #0
 8000178:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04);
 800017a:	4808      	ldr	r0, [pc, #32]	@ (800019c <main+0x50>)
 800017c:	f000 f916 	bl	80003ac <sr04_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	sr04_trigger(&sr04);
 8000180:	4806      	ldr	r0, [pc, #24]	@ (800019c <main+0x50>)
 8000182:	f000 f999 	bl	80004b8 <sr04_trigger>
	HAL_Delay(100);
 8000186:	2064      	movs	r0, #100	@ 0x64
 8000188:	f000 fcf8 	bl	8000b7c <HAL_Delay>
	printf("Distance: %lu mm\r\n", sr04.distance);
 800018c:	4b03      	ldr	r3, [pc, #12]	@ (800019c <main+0x50>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4619      	mov	r1, r3
 8000192:	4805      	ldr	r0, [pc, #20]	@ (80001a8 <main+0x5c>)
 8000194:	f002 fb98 	bl	80028c8 <iprintf>
  {
 8000198:	bf00      	nop
 800019a:	e7f1      	b.n	8000180 <main+0x34>
 800019c:	200000cc 	.word	0x200000cc
 80001a0:	40010800 	.word	0x40010800
 80001a4:	20000084 	.word	0x20000084
 80001a8:	080035d0 	.word	0x080035d0

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	@ 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	@ 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fbd9 	bl	8002972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 ff8f 	bl	8001118 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000200:	f000 f8ce 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 f9fc 	bl	800161c <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022a:	f000 f8b9 	bl	80003a0 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	@ 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	@ 0x28
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800024c:	f107 0310 	add.w	r3, r7, #16
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000256:	463b      	mov	r3, r7
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000262:	4b2d      	ldr	r3, [pc, #180]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000264:	4a2d      	ldr	r2, [pc, #180]	@ (800031c <MX_TIM1_Init+0xe4>)
 8000266:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000268:	4b2b      	ldr	r3, [pc, #172]	@ (8000318 <MX_TIM1_Init+0xe0>)
 800026a:	2247      	movs	r2, #71	@ 0x47
 800026c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026e:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000274:	4b28      	ldr	r3, [pc, #160]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000276:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800027a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027c:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <MX_TIM1_Init+0xe0>)
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000282:	4b25      	ldr	r3, [pc, #148]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000288:	4b23      	ldr	r3, [pc, #140]	@ (8000318 <MX_TIM1_Init+0xe0>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800028e:	4822      	ldr	r0, [pc, #136]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000290:	f001 fb20 	bl	80018d4 <HAL_TIM_Base_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800029a:	f000 f881 	bl	80003a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800029e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4619      	mov	r1, r3
 80002aa:	481b      	ldr	r0, [pc, #108]	@ (8000318 <MX_TIM1_Init+0xe0>)
 80002ac:	f001 febc 	bl	8002028 <HAL_TIM_ConfigClockSource>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002b6:	f000 f873 	bl	80003a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80002ba:	4817      	ldr	r0, [pc, #92]	@ (8000318 <MX_TIM1_Init+0xe0>)
 80002bc:	f001 fbac 	bl	8001a18 <HAL_TIM_IC_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80002c6:	f000 f86b 	bl	80003a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	480f      	ldr	r0, [pc, #60]	@ (8000318 <MX_TIM1_Init+0xe0>)
 80002da:	f002 f9c3 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80002e4:	f000 f85c 	bl	80003a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80002e8:	2300      	movs	r3, #0
 80002ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80002ec:	2301      	movs	r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	4619      	mov	r1, r3
 80002fe:	4806      	ldr	r0, [pc, #24]	@ (8000318 <MX_TIM1_Init+0xe0>)
 8000300:	f001 fdf6 	bl	8001ef0 <HAL_TIM_IC_ConfigChannel>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800030a:	f000 f849 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	3728      	adds	r7, #40	@ 0x28
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000084 	.word	0x20000084
 800031c:	40012c00 	.word	0x40012c00

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_GPIO_Init+0x78>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a17      	ldr	r2, [pc, #92]	@ (8000398 <MX_GPIO_Init+0x78>)
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_GPIO_Init+0x78>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_GPIO_Init+0x78>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <MX_GPIO_Init+0x78>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_GPIO_Init+0x78>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800036a:	480c      	ldr	r0, [pc, #48]	@ (800039c <MX_GPIO_Init+0x7c>)
 800036c:	f000 febc 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4619      	mov	r1, r3
 8000388:	4804      	ldr	r0, [pc, #16]	@ (800039c <MX_GPIO_Init+0x7c>)
 800038a:	f000 fd29 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40010800 	.word	0x40010800

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
}
 80003a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <Error_Handler+0x8>

080003ac <sr04_init>:
 */

#include "sensor.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	889b      	ldrh	r3, [r3, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	4619      	mov	r1, r3
 80003c0:	f000 fe92 	bl	80010e8 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	899b      	ldrh	r3, [r3, #12]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d10a      	bne.n	80003e2 <sr04_init+0x36>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	6a1a      	ldr	r2, [r3, #32]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f022 020a 	bic.w	r2, r2, #10
 80003de:	621a      	str	r2, [r3, #32]
 80003e0:	e027      	b.n	8000432 <sr04_init+0x86>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	899b      	ldrh	r3, [r3, #12]
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	d10a      	bne.n	8000400 <sr04_init+0x54>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6a1b      	ldr	r3, [r3, #32]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	6892      	ldr	r2, [r2, #8]
 80003f6:	6812      	ldr	r2, [r2, #0]
 80003f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80003fc:	6213      	str	r3, [r2, #32]
 80003fe:	e018      	b.n	8000432 <sr04_init+0x86>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	899b      	ldrh	r3, [r3, #12]
 8000404:	2b08      	cmp	r3, #8
 8000406:	d10a      	bne.n	800041e <sr04_init+0x72>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	6a1b      	ldr	r3, [r3, #32]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6892      	ldr	r2, [r2, #8]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800041a:	6213      	str	r3, [r2, #32]
 800041c:	e009      	b.n	8000432 <sr04_init+0x86>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6892      	ldr	r2, [r2, #8]
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000430:	6213      	str	r3, [r2, #32]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	899b      	ldrh	r3, [r3, #12]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d108      	bne.n	800044c <sr04_init+0xa0>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6a12      	ldr	r2, [r2, #32]
 8000448:	621a      	str	r2, [r3, #32]
 800044a:	e021      	b.n	8000490 <sr04_init+0xe4>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2b04      	cmp	r3, #4
 8000452:	d108      	bne.n	8000466 <sr04_init+0xba>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	6892      	ldr	r2, [r2, #8]
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	6213      	str	r3, [r2, #32]
 8000464:	e014      	b.n	8000490 <sr04_init+0xe4>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	899b      	ldrh	r3, [r3, #12]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d108      	bne.n	8000480 <sr04_init+0xd4>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	6892      	ldr	r2, [r2, #8]
 8000478:	6812      	ldr	r2, [r2, #0]
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	6213      	str	r3, [r2, #32]
 800047e:	e007      	b.n	8000490 <sr04_init+0xe4>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	6892      	ldr	r2, [r2, #8]
 800048a:	6812      	ldr	r2, [r2, #0]
 800048c:	6a1b      	ldr	r3, [r3, #32]
 800048e:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2200      	movs	r2, #0
 8000494:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	899b      	ldrh	r3, [r3, #12]
 800049e:	4619      	mov	r1, r3
 80004a0:	4610      	mov	r0, r2
 80004a2:	f001 fb11 	bl	8001ac8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fa62 	bl	8001974 <HAL_TIM_Base_Start_IT>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	889b      	ldrh	r3, [r3, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	f000 fe0c 	bl	80010e8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fb53 	bl	8000b7c <HAL_Delay>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	889b      	ldrh	r3, [r3, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	f000 fe01 	bl	80010e8 <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <sr04_read_distance>:

void sr04_read_distance(sr04_t *sr04_struct){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7b9b      	ldrb	r3, [r3, #14]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <sr04_read_distance+0x16>
 8000500:	2b01      	cmp	r3, #1
 8000502:	d07b      	beq.n	80005fc <sr04_read_distance+0x10c>
      }
      sr04_struct->last_distance = sr04_struct->distance;
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      break;
  }
}
 8000504:	e11e      	b.n	8000744 <sr04_read_distance+0x254>
      sr04_struct->start_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2201      	movs	r2, #1
 8000516:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	899b      	ldrh	r3, [r3, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10a      	bne.n	800053c <sr04_read_distance+0x4c>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6a1a      	ldr	r2, [r3, #32]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f022 020a 	bic.w	r2, r2, #10
 8000538:	621a      	str	r2, [r3, #32]
 800053a:	e027      	b.n	800058c <sr04_read_distance+0x9c>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	899b      	ldrh	r3, [r3, #12]
 8000540:	2b04      	cmp	r3, #4
 8000542:	d10a      	bne.n	800055a <sr04_read_distance+0x6a>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a1b      	ldr	r3, [r3, #32]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6892      	ldr	r2, [r2, #8]
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000556:	6213      	str	r3, [r2, #32]
 8000558:	e018      	b.n	800058c <sr04_read_distance+0x9c>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	899b      	ldrh	r3, [r3, #12]
 800055e:	2b08      	cmp	r3, #8
 8000560:	d10a      	bne.n	8000578 <sr04_read_distance+0x88>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	6892      	ldr	r2, [r2, #8]
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000574:	6213      	str	r3, [r2, #32]
 8000576:	e009      	b.n	800058c <sr04_read_distance+0x9c>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6a1b      	ldr	r3, [r3, #32]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6892      	ldr	r2, [r2, #8]
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800058a:	6213      	str	r3, [r2, #32]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	899b      	ldrh	r3, [r3, #12]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10a      	bne.n	80005aa <sr04_read_distance+0xba>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a1a      	ldr	r2, [r3, #32]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f042 0202 	orr.w	r2, r2, #2
 80005a6:	621a      	str	r2, [r3, #32]
      break;
 80005a8:	e0cc      	b.n	8000744 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	899b      	ldrh	r3, [r3, #12]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d10a      	bne.n	80005c8 <sr04_read_distance+0xd8>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6a1b      	ldr	r3, [r3, #32]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	6892      	ldr	r2, [r2, #8]
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	6213      	str	r3, [r2, #32]
      break;
 80005c6:	e0bd      	b.n	8000744 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	899b      	ldrh	r3, [r3, #12]
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d10a      	bne.n	80005e6 <sr04_read_distance+0xf6>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	6892      	ldr	r2, [r2, #8]
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e2:	6213      	str	r3, [r2, #32]
      break;
 80005e4:	e0ae      	b.n	8000744 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6a1b      	ldr	r3, [r3, #32]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6892      	ldr	r2, [r2, #8]
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005f8:	6213      	str	r3, [r2, #32]
      break;
 80005fa:	e0a3      	b.n	8000744 <sr04_read_distance+0x254>
      sr04_struct->end_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim) + sr04_struct->tim_update_count * sr04_struct->echo_htim->Init.Period;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8c1b      	ldrh	r3, [r3, #32]
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	fb01 f303 	mul.w	r3, r1, r3
 8000614:	441a      	add	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	739a      	strb	r2, [r3, #14]
      sr04_struct->distance = (sr04_struct->end_counter - sr04_struct->start_counter) * 340 / (SystemCoreClock / 1000000) / 2 / (1000 / sr04_struct->echo_htim->Init.Prescaler);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800062e:	fb03 f202 	mul.w	r2, r3, r2
 8000632:	4b47      	ldr	r3, [pc, #284]	@ (8000750 <sr04_read_distance+0x260>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4947      	ldr	r1, [pc, #284]	@ (8000754 <sr04_read_distance+0x264>)
 8000638:	fba1 1303 	umull	r1, r3, r1, r3
 800063c:	0c9b      	lsrs	r3, r3, #18
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	085a      	lsrs	r2, r3, #1
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800064e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000652:	fbb2 f2f3 	udiv	r2, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000662:	4293      	cmp	r3, r2
 8000664:	d903      	bls.n	800066e <sr04_read_distance+0x17e>
        sr04_struct->distance = sr04_struct->last_distance;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	899b      	ldrh	r3, [r3, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <sr04_read_distance+0x1a4>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6a1a      	ldr	r2, [r3, #32]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 020a 	bic.w	r2, r2, #10
 8000690:	621a      	str	r2, [r3, #32]
 8000692:	e027      	b.n	80006e4 <sr04_read_distance+0x1f4>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	899b      	ldrh	r3, [r3, #12]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d10a      	bne.n	80006b2 <sr04_read_distance+0x1c2>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	6892      	ldr	r2, [r2, #8]
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80006ae:	6213      	str	r3, [r2, #32]
 80006b0:	e018      	b.n	80006e4 <sr04_read_distance+0x1f4>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	899b      	ldrh	r3, [r3, #12]
 80006b6:	2b08      	cmp	r3, #8
 80006b8:	d10a      	bne.n	80006d0 <sr04_read_distance+0x1e0>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a1b      	ldr	r3, [r3, #32]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	6892      	ldr	r2, [r2, #8]
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80006cc:	6213      	str	r3, [r2, #32]
 80006ce:	e009      	b.n	80006e4 <sr04_read_distance+0x1f4>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	6892      	ldr	r2, [r2, #8]
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006e2:	6213      	str	r3, [r2, #32]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	899b      	ldrh	r3, [r3, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d108      	bne.n	80006fe <sr04_read_distance+0x20e>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6a12      	ldr	r2, [r2, #32]
 80006fa:	621a      	str	r2, [r3, #32]
      break;
 80006fc:	e021      	b.n	8000742 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d108      	bne.n	8000718 <sr04_read_distance+0x228>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	6892      	ldr	r2, [r2, #8]
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	6213      	str	r3, [r2, #32]
      break;
 8000716:	e014      	b.n	8000742 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d108      	bne.n	8000732 <sr04_read_distance+0x242>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	6892      	ldr	r2, [r2, #8]
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	6213      	str	r3, [r2, #32]
      break;
 8000730:	e007      	b.n	8000742 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6892      	ldr	r2, [r2, #8]
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	6213      	str	r3, [r2, #32]
      break;
 8000742:	bf00      	nop
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	431bde83 	.word	0x431bde83

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_MspInit+0x5c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x5c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_MspInit+0x60>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_MspInit+0x60>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000

080007bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <HAL_TIM_Base_MspInit+0x84>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d12c      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 80007e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <HAL_TIM_Base_MspInit+0x88>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <HAL_TIM_Base_MspInit+0x8c>)
 8000822:	f000 fadd 	bl	8000de0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201b      	movs	r0, #27
 800082c:	f000 faa1 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000830:	201b      	movs	r0, #27
 8000832:	f000 faba 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f952 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  // Capture interrupt handling
  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <TIM1_CC_IRQHandler+0x30>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d109      	bne.n	80008ca <TIM1_CC_IRQHandler+0x26>
  {
	  if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <TIM1_CC_IRQHandler+0x30>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d102      	bne.n	80008ca <TIM1_CC_IRQHandler+0x26>
	  {
		  sr04_read_distance(&sr04);
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <TIM1_CC_IRQHandler+0x34>)
 80008c6:	f7ff fe13 	bl	80004f0 <sr04_read_distance>
	  }
  }
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008ca:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <TIM1_CC_IRQHandler+0x30>)
 80008cc:	f001 fa08 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000084 	.word	0x20000084
 80008d8:	200000cc 	.word	0x200000cc

080008dc <TIM1_UP_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  // Update interrupt handling
  if (__HAL_TIM_GET_FLAG(sr04.echo_htim, TIM_FLAG_UPDATE) != RESET)
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <TIM1_UP_IRQHandler+0x3c>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10d      	bne.n	800090c <TIM1_UP_IRQHandler+0x30>
  {
      if (__HAL_TIM_GET_IT_SOURCE(sr04.echo_htim, TIM_IT_UPDATE) != RESET)
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <TIM1_UP_IRQHandler+0x3c>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d105      	bne.n	800090c <TIM1_UP_IRQHandler+0x30>
      {
          sr04.tim_update_count++;
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <TIM1_UP_IRQHandler+0x3c>)
 8000902:	8c1b      	ldrh	r3, [r3, #32]
 8000904:	3301      	adds	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <TIM1_UP_IRQHandler+0x3c>)
 800090a:	841a      	strh	r2, [r3, #32]
      }
  }
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <TIM1_UP_IRQHandler+0x40>)
 800090e:	f001 f9e7 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000cc 	.word	0x200000cc
 800091c:	20000084 	.word	0x20000084

08000920 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00a      	b.n	8000948 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000932:	f3af 8000 	nop.w
 8000936:	4601      	mov	r1, r0
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	b2ca      	uxtb	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf0      	blt.n	8000932 <_read+0x12>
  }

  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf1      	blt.n	800096c <_write+0x12>
  }
  return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_close>:

int _close(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b8:	605a      	str	r2, [r3, #4]
  return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f001 fff4 	bl	8002a10 <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20005000 	.word	0x20005000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	200000f0 	.word	0x200000f0
 8000a5c:	20000248 	.word	0x20000248

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff fff8 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a72:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a74:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a09      	ldr	r2, [pc, #36]	@ (8000aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a88:	4c09      	ldr	r4, [pc, #36]	@ (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f001 ffc1 	bl	8002a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fb57 	bl	800014c <main>
  bx lr
 8000a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000aa8:	08003644 	.word	0x08003644
  ldr r2, =_sbss
 8000aac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab0:	20000244 	.word	0x20000244

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_Init+0x28>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <HAL_Init+0x28>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f947 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff fe40 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f95f 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 f927 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	@ (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200000f4 	.word	0x200000f4

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	@ (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	200000f4 	.word	0x200000f4

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff fff0 	bl	8000b68 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffe0 	bl	8000b68 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4906      	ldr	r1, [pc, #24]	@ (8000c5c <__NVIC_EnableIRQ+0x34>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	@ (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	@ (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	@ 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	@ 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	f7ff ff90 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff2d 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff42 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff90 	bl	8000cb4 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5f 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff35 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b08b      	sub	sp, #44	@ 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e169      	b.n	80010c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df4:	2201      	movs	r2, #1
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8158 	bne.w	80010c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a9a      	ldr	r2, [pc, #616]	@ (8001080 <HAL_GPIO_Init+0x2a0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d05e      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
 8000e1c:	4a98      	ldr	r2, [pc, #608]	@ (8001080 <HAL_GPIO_Init+0x2a0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d875      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e22:	4a98      	ldr	r2, [pc, #608]	@ (8001084 <HAL_GPIO_Init+0x2a4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d058      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
 8000e28:	4a96      	ldr	r2, [pc, #600]	@ (8001084 <HAL_GPIO_Init+0x2a4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d86f      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e2e:	4a96      	ldr	r2, [pc, #600]	@ (8001088 <HAL_GPIO_Init+0x2a8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d052      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
 8000e34:	4a94      	ldr	r2, [pc, #592]	@ (8001088 <HAL_GPIO_Init+0x2a8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d869      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e3a:	4a94      	ldr	r2, [pc, #592]	@ (800108c <HAL_GPIO_Init+0x2ac>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d04c      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
 8000e40:	4a92      	ldr	r2, [pc, #584]	@ (800108c <HAL_GPIO_Init+0x2ac>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d863      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e46:	4a92      	ldr	r2, [pc, #584]	@ (8001090 <HAL_GPIO_Init+0x2b0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d046      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
 8000e4c:	4a90      	ldr	r2, [pc, #576]	@ (8001090 <HAL_GPIO_Init+0x2b0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d85d      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d82a      	bhi.n	8000eac <HAL_GPIO_Init+0xcc>
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d859      	bhi.n	8000f0e <HAL_GPIO_Init+0x12e>
 8000e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e60 <HAL_GPIO_Init+0x80>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000eb5 	.word	0x08000eb5
 8000e68:	08000ec7 	.word	0x08000ec7
 8000e6c:	08000f09 	.word	0x08000f09
 8000e70:	08000f0f 	.word	0x08000f0f
 8000e74:	08000f0f 	.word	0x08000f0f
 8000e78:	08000f0f 	.word	0x08000f0f
 8000e7c:	08000f0f 	.word	0x08000f0f
 8000e80:	08000f0f 	.word	0x08000f0f
 8000e84:	08000f0f 	.word	0x08000f0f
 8000e88:	08000f0f 	.word	0x08000f0f
 8000e8c:	08000f0f 	.word	0x08000f0f
 8000e90:	08000f0f 	.word	0x08000f0f
 8000e94:	08000f0f 	.word	0x08000f0f
 8000e98:	08000f0f 	.word	0x08000f0f
 8000e9c:	08000f0f 	.word	0x08000f0f
 8000ea0:	08000f0f 	.word	0x08000f0f
 8000ea4:	08000ebd 	.word	0x08000ebd
 8000ea8:	08000ed1 	.word	0x08000ed1
 8000eac:	4a79      	ldr	r2, [pc, #484]	@ (8001094 <HAL_GPIO_Init+0x2b4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eb2:	e02c      	b.n	8000f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e029      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e024      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	3308      	adds	r3, #8
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e01f      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	330c      	adds	r3, #12
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e01a      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e013      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d105      	bne.n	8000efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	611a      	str	r2, [r3, #16]
          break;
 8000efa:	e009      	b.n	8000f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000efc:	2308      	movs	r3, #8
 8000efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	615a      	str	r2, [r3, #20]
          break;
 8000f06:	e003      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x130>
          break;
 8000f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2bff      	cmp	r3, #255	@ 0xff
 8000f14:	d801      	bhi.n	8000f1a <HAL_GPIO_Init+0x13a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	e001      	b.n	8000f1e <HAL_GPIO_Init+0x13e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2bff      	cmp	r3, #255	@ 0xff
 8000f24:	d802      	bhi.n	8000f2c <HAL_GPIO_Init+0x14c>
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x152>
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	3b08      	subs	r3, #8
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	210f      	movs	r1, #15
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	401a      	ands	r2, r3
 8000f44:	6a39      	ldr	r1, [r7, #32]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80b1 	beq.w	80010c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f60:	4b4d      	ldr	r3, [pc, #308]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f78:	4a48      	ldr	r2, [pc, #288]	@ (800109c <HAL_GPIO_Init+0x2bc>)
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a40      	ldr	r2, [pc, #256]	@ (80010a0 <HAL_GPIO_Init+0x2c0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_Init+0x1ec>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80010a4 <HAL_GPIO_Init+0x2c4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e8>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3e      	ldr	r2, [pc, #248]	@ (80010a8 <HAL_GPIO_Init+0x2c8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ac <HAL_GPIO_Init+0x2cc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_Init+0x1e0>
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fde:	492f      	ldr	r1, [pc, #188]	@ (800109c <HAL_GPIO_Init+0x2bc>)
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	492c      	ldr	r1, [pc, #176]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001006:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	4928      	ldr	r1, [pc, #160]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001010:	4013      	ands	r3, r2
 8001012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	4922      	ldr	r1, [pc, #136]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	60cb      	str	r3, [r1, #12]
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	43db      	mvns	r3, r3
 8001036:	491e      	ldr	r1, [pc, #120]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001038:	4013      	ands	r3, r2
 800103a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4918      	ldr	r1, [pc, #96]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001056:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	43db      	mvns	r3, r3
 800105e:	4914      	ldr	r1, [pc, #80]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001060:	4013      	ands	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d021      	beq.n	80010b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	490e      	ldr	r1, [pc, #56]	@ (80010b0 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e021      	b.n	80010c2 <HAL_GPIO_Init+0x2e2>
 800107e:	bf00      	nop
 8001080:	10320000 	.word	0x10320000
 8001084:	10310000 	.word	0x10310000
 8001088:	10220000 	.word	0x10220000
 800108c:	10210000 	.word	0x10210000
 8001090:	10120000 	.word	0x10120000
 8001094:	10110000 	.word	0x10110000
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011000 	.word	0x40011000
 80010ac:	40011400 	.word	0x40011400
 80010b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4909      	ldr	r1, [pc, #36]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f ae8e 	bne.w	8000df4 <HAL_GPIO_Init+0x14>
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	372c      	adds	r7, #44	@ 0x2c
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001104:	e003      	b.n	800110e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e272      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8087 	beq.w	8001246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001138:	4b92      	ldr	r3, [pc, #584]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b04      	cmp	r3, #4
 8001142:	d00c      	beq.n	800115e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001144:	4b8f      	ldr	r3, [pc, #572]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d112      	bne.n	8001176 <HAL_RCC_OscConfig+0x5e>
 8001150:	4b8c      	ldr	r3, [pc, #560]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800115c:	d10b      	bne.n	8001176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d06c      	beq.n	8001244 <HAL_RCC_OscConfig+0x12c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d168      	bne.n	8001244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e24c      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x76>
 8001180:	4b80      	ldr	r3, [pc, #512]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a7f      	ldr	r2, [pc, #508]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e02e      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b7b      	ldr	r3, [pc, #492]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7a      	ldr	r2, [pc, #488]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b78      	ldr	r3, [pc, #480]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a77      	ldr	r2, [pc, #476]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e01d      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0xbc>
 80011ba:	4b72      	ldr	r3, [pc, #456]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a71      	ldr	r2, [pc, #452]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e00b      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 80011d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a67      	ldr	r2, [pc, #412]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fcb8 	bl	8000b68 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fcb4 	bl	8000b68 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	@ 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e200      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4b5d      	ldr	r3, [pc, #372]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0xe4>
 800121a:	e014      	b.n	8001246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fca4 	bl	8000b68 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fca0 	bl	8000b68 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	@ 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1ec      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x10c>
 8001242:	e000      	b.n	8001246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d063      	beq.n	800131a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001252:	4b4c      	ldr	r3, [pc, #304]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800125e:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d11c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x18c>
 800126a:	4b46      	ldr	r3, [pc, #280]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d116      	bne.n	80012a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_RCC_OscConfig+0x176>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e1c0      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b3d      	ldr	r3, [pc, #244]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4939      	ldr	r1, [pc, #228]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	e03a      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fc59 	bl	8000b68 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc55 	bl	8000b68 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e1a1      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4927      	ldr	r1, [pc, #156]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
 80012ec:	e015      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc38 	bl	8000b68 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc34 	bl	8000b68 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e180      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d03a      	beq.n	800139c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d019      	beq.n	8001362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_RCC_OscConfig+0x274>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001334:	f7ff fc18 	bl	8000b68 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fc14 	bl	8000b68 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e160      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f000 fa9c 	bl	8001898 <RCC_Delay>
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_RCC_OscConfig+0x274>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fbfe 	bl	8000b68 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136e:	e00f      	b.n	8001390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fbfa 	bl	8000b68 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d908      	bls.n	8001390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e146      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	42420000 	.word	0x42420000
 800138c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4b92      	ldr	r3, [pc, #584]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e9      	bne.n	8001370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a6 	beq.w	80014f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b8b      	ldr	r3, [pc, #556]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10d      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b88      	ldr	r3, [pc, #544]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a87      	ldr	r2, [pc, #540]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b85      	ldr	r3, [pc, #532]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	4b82      	ldr	r3, [pc, #520]	@ (80015e0 <HAL_RCC_OscConfig+0x4c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d118      	bne.n	8001414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e2:	4b7f      	ldr	r3, [pc, #508]	@ (80015e0 <HAL_RCC_OscConfig+0x4c8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7e      	ldr	r2, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0x4c8>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbbb 	bl	8000b68 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fbb7 	bl	8000b68 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	@ 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e103      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b75      	ldr	r3, [pc, #468]	@ (80015e0 <HAL_RCC_OscConfig+0x4c8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x312>
 800141c:	4b6f      	ldr	r3, [pc, #444]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a6e      	ldr	r2, [pc, #440]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	e02d      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x334>
 8001432:	4b6a      	ldr	r3, [pc, #424]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a69      	ldr	r2, [pc, #420]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	4b67      	ldr	r3, [pc, #412]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a66      	ldr	r2, [pc, #408]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	e01c      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x356>
 8001454:	4b61      	ldr	r3, [pc, #388]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a60      	ldr	r2, [pc, #384]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	4b5e      	ldr	r3, [pc, #376]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a5d      	ldr	r2, [pc, #372]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800146e:	4b5b      	ldr	r3, [pc, #364]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a5a      	ldr	r2, [pc, #360]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a57      	ldr	r2, [pc, #348]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d015      	beq.n	80014ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb6b 	bl	8000b68 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fb67 	bl	8000b68 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0b1      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0ee      	beq.n	8001496 <HAL_RCC_OscConfig+0x37e>
 80014b8:	e014      	b.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb55 	bl	8000b68 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff fb51 	bl	8000b68 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e09b      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d8:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ee      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d105      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ea:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a3b      	ldr	r2, [pc, #236]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8087 	beq.w	800160e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d061      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d146      	bne.n	80015a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fb25 	bl	8000b68 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fb21 	bl	8000b68 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e06d      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4921      	ldr	r1, [pc, #132]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a19      	ldr	r1, [r3, #32]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	430b      	orrs	r3, r1
 800156e:	491b      	ldr	r1, [pc, #108]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_RCC_OscConfig+0x4cc>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff faf5 	bl	8000b68 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff faf1 	bl	8000b68 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e03d      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x46a>
 80015a0:	e035      	b.n	800160e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_RCC_OscConfig+0x4cc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fade 	bl	8000b68 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fada 	bl	8000b68 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e026      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x498>
 80015ce:	e01e      	b.n	800160e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e019      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40007000 	.word	0x40007000
 80015e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_RCC_OscConfig+0x500>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0d0      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d910      	bls.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0207 	bic.w	r2, r3, #7
 8001646:	4965      	ldr	r1, [pc, #404]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b63      	ldr	r3, [pc, #396]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0b8      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001678:	4b59      	ldr	r3, [pc, #356]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a58      	ldr	r2, [pc, #352]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001690:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800169a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	494d      	ldr	r1, [pc, #308]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d040      	beq.n	800173c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b47      	ldr	r3, [pc, #284]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d115      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e073      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f023 0203 	bic.w	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4936      	ldr	r1, [pc, #216]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170c:	f7ff fa2c 	bl	8000b68 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	e00a      	b.n	800172a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff fa28 	bl	8000b68 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e053      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 020c 	and.w	r2, r3, #12
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	429a      	cmp	r2, r3
 800173a:	d1eb      	bne.n	8001714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d210      	bcs.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4922      	ldr	r1, [pc, #136]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e032      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4916      	ldr	r1, [pc, #88]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017aa:	f000 f821 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	490a      	ldr	r1, [pc, #40]	@ (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_RCC_ClockConfig+0x1cc>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_RCC_ClockConfig+0x1d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f98a 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	080035e4 	.word	0x080035e4
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800180a:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x94>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d002      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x30>
 800181a:	2b08      	cmp	r3, #8
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x36>
 800181e:	e027      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x98>)
 8001822:	613b      	str	r3, [r7, #16]
      break;
 8001824:	e027      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d010      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x94>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0c5b      	lsrs	r3, r3, #17
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x98>)
 8001852:	fb03 f202 	mul.w	r2, r3, r2
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e004      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	613b      	str	r3, [r7, #16]
      break;
 800186e:	e002      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x98>)
 8001872:	613b      	str	r3, [r7, #16]
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	693b      	ldr	r3, [r7, #16]
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	007a1200 	.word	0x007a1200
 800188c:	080035f4 	.word	0x080035f4
 8001890:	08003604 	.word	0x08003604
 8001894:	003d0900 	.word	0x003d0900

08001898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <RCC_Delay+0x34>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <RCC_Delay+0x38>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0a5b      	lsrs	r3, r3, #9
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b4:	bf00      	nop
  }
  while (Delay --);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f9      	bne.n	80018b4 <RCC_Delay+0x1c>
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000000 	.word	0x20000000
 80018d0:	10624dd3 	.word	0x10624dd3

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e041      	b.n	800196a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe ff5e 	bl	80007bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 fc7c 	bl	8002210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d001      	beq.n	800198c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e03a      	b.n	8001a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <HAL_TIM_Base_Start_IT+0x98>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00e      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x58>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b6:	d009      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x58>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x58>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d111      	bne.n	80019f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d010      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ee:	e007      	b.n	8001a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40000800 	.word	0x40000800

08001a18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e041      	b.n	8001aae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f839 	bl	8001ab6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 fbda 	bl	8002210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <HAL_TIM_IC_Start_IT+0x1e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e013      	b.n	8001b0e <HAL_TIM_IC_Start_IT+0x46>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d104      	bne.n	8001af6 <HAL_TIM_IC_Start_IT+0x2e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e00b      	b.n	8001b0e <HAL_TIM_IC_Start_IT+0x46>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d104      	bne.n	8001b06 <HAL_TIM_IC_Start_IT+0x3e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	e003      	b.n	8001b0e <HAL_TIM_IC_Start_IT+0x46>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d104      	bne.n	8001b20 <HAL_TIM_IC_Start_IT+0x58>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e013      	b.n	8001b48 <HAL_TIM_IC_Start_IT+0x80>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d104      	bne.n	8001b30 <HAL_TIM_IC_Start_IT+0x68>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e00b      	b.n	8001b48 <HAL_TIM_IC_Start_IT+0x80>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d104      	bne.n	8001b40 <HAL_TIM_IC_Start_IT+0x78>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e003      	b.n	8001b48 <HAL_TIM_IC_Start_IT+0x80>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b8      	b.n	8001ccc <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_IC_Start_IT+0xa2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	e013      	b.n	8001b92 <HAL_TIM_IC_Start_IT+0xca>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d104      	bne.n	8001b7a <HAL_TIM_IC_Start_IT+0xb2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b78:	e00b      	b.n	8001b92 <HAL_TIM_IC_Start_IT+0xca>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d104      	bne.n	8001b8a <HAL_TIM_IC_Start_IT+0xc2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b88:	e003      	b.n	8001b92 <HAL_TIM_IC_Start_IT+0xca>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <HAL_TIM_IC_Start_IT+0xda>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba0:	e013      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x102>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d104      	bne.n	8001bb2 <HAL_TIM_IC_Start_IT+0xea>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb0:	e00b      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x102>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d104      	bne.n	8001bc2 <HAL_TIM_IC_Start_IT+0xfa>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bc0:	e003      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x102>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d841      	bhi.n	8001c54 <HAL_TIM_IC_Start_IT+0x18c>
 8001bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd8 <HAL_TIM_IC_Start_IT+0x110>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001c0d 	.word	0x08001c0d
 8001bdc:	08001c55 	.word	0x08001c55
 8001be0:	08001c55 	.word	0x08001c55
 8001be4:	08001c55 	.word	0x08001c55
 8001be8:	08001c1f 	.word	0x08001c1f
 8001bec:	08001c55 	.word	0x08001c55
 8001bf0:	08001c55 	.word	0x08001c55
 8001bf4:	08001c55 	.word	0x08001c55
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c55 	.word	0x08001c55
 8001c00:	08001c55 	.word	0x08001c55
 8001c04:	08001c55 	.word	0x08001c55
 8001c08:	08001c43 	.word	0x08001c43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0202 	orr.w	r2, r2, #2
 8001c1a:	60da      	str	r2, [r3, #12]
      break;
 8001c1c:	e01d      	b.n	8001c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0204 	orr.w	r2, r2, #4
 8001c2c:	60da      	str	r2, [r3, #12]
      break;
 8001c2e:	e014      	b.n	8001c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	60da      	str	r2, [r3, #12]
      break;
 8001c40:	e00b      	b.n	8001c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0210 	orr.w	r2, r2, #16
 8001c50:	60da      	str	r2, [r3, #12]
      break;
 8001c52:	e002      	b.n	8001c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      break;
 8001c58:	bf00      	nop
  }

  if (status == HAL_OK)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d134      	bne.n	8001cca <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fcd6 	bl	800261a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <HAL_TIM_IC_Start_IT+0x20c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00e      	beq.n	8001c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c80:	d009      	beq.n	8001c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <HAL_TIM_IC_Start_IT+0x210>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d004      	beq.n	8001c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_TIM_IC_Start_IT+0x214>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d111      	bne.n	8001cba <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d010      	beq.n	8001cca <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	e007      	b.n	8001cca <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa59 	bl	80021da <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa4c 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa5b 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa2f 	bl	80021da <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa22 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa31 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0208 	mvn.w	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa05 	bl	80021da <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f9f8 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa07 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0210 	mvn.w	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9db 	bl	80021da <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f9ce 	bl	80021c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f9dd 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0201 	mvn.w	r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f9a9 	bl	80021b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	2b80      	cmp	r3, #128	@ 0x80
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7c:	2b80      	cmp	r3, #128	@ 0x80
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fc51 	bl	8002732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9a:	2b40      	cmp	r3, #64	@ 0x40
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea8:	2b40      	cmp	r3, #64	@ 0x40
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f9a1 	bl	80021fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fc1c 	bl	8002720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e088      	b.n	8002020 <HAL_TIM_IC_ConfigChannel+0x130>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001f2c:	f000 f9d2 	bl	80022d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 020c 	bic.w	r2, r2, #12
 8001f3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6999      	ldr	r1, [r3, #24]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	e060      	b.n	8002016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d11c      	bne.n	8001f94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001f6a:	f000 fa3b 	bl	80023e4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001f7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6999      	ldr	r1, [r3, #24]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	021a      	lsls	r2, r3, #8
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	e040      	b.n	8002016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d11b      	bne.n	8001fd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001faa:	f000 fa86 	bl	80024ba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020c 	bic.w	r2, r2, #12
 8001fbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69d9      	ldr	r1, [r3, #28]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
 8001fd0:	e021      	b.n	8002016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d11c      	bne.n	8002012 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001fe8:	f000 faa2 	bl	8002530 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001ffa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69d9      	ldr	r1, [r3, #28]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	021a      	lsls	r2, r3, #8
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	61da      	str	r2, [r3, #28]
 8002010:	e001      	b.n	8002016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIM_ConfigClockSource+0x1c>
 8002040:	2302      	movs	r3, #2
 8002042:	e0b4      	b.n	80021ae <HAL_TIM_ConfigClockSource+0x186>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800206a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800207c:	d03e      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0xd4>
 800207e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002082:	f200 8087 	bhi.w	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800208a:	f000 8086 	beq.w	800219a <HAL_TIM_ConfigClockSource+0x172>
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002092:	d87f      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 8002094:	2b70      	cmp	r3, #112	@ 0x70
 8002096:	d01a      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0xa6>
 8002098:	2b70      	cmp	r3, #112	@ 0x70
 800209a:	d87b      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 800209c:	2b60      	cmp	r3, #96	@ 0x60
 800209e:	d050      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0x11a>
 80020a0:	2b60      	cmp	r3, #96	@ 0x60
 80020a2:	d877      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 80020a4:	2b50      	cmp	r3, #80	@ 0x50
 80020a6:	d03c      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xfa>
 80020a8:	2b50      	cmp	r3, #80	@ 0x50
 80020aa:	d873      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 80020ac:	2b40      	cmp	r3, #64	@ 0x40
 80020ae:	d058      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0x13a>
 80020b0:	2b40      	cmp	r3, #64	@ 0x40
 80020b2:	d86f      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b30      	cmp	r3, #48	@ 0x30
 80020b6:	d064      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x15a>
 80020b8:	2b30      	cmp	r3, #48	@ 0x30
 80020ba:	d86b      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d060      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x15a>
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d867      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d05c      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x15a>
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d05a      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x15a>
 80020cc:	e062      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020de:	f000 fa7d 	bl	80025dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	609a      	str	r2, [r3, #8]
      break;
 80020fa:	e04f      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800210c:	f000 fa66 	bl	80025dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800211e:	609a      	str	r2, [r3, #8]
      break;
 8002120:	e03c      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	461a      	mov	r2, r3
 8002130:	f000 f92a 	bl	8002388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2150      	movs	r1, #80	@ 0x50
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa34 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 8002140:	e02c      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	461a      	mov	r2, r3
 8002150:	f000 f984 	bl	800245c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2160      	movs	r1, #96	@ 0x60
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fa24 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 8002160:	e01c      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f90a 	bl	8002388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2140      	movs	r1, #64	@ 0x40
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa14 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 8002180:	e00c      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f000 fa0b 	bl	80025a8 <TIM_ITRx_SetConfig>
      break;
 8002192:	e003      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      break;
 8002198:	e000      	b.n	800219c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800219a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <TIM_Base_SetConfig+0xb8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <TIM_Base_SetConfig+0xbc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <TIM_Base_SetConfig+0xc0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <TIM_Base_SetConfig+0xb8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a19      	ldr	r2, [pc, #100]	@ (80022cc <TIM_Base_SetConfig+0xbc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <TIM_Base_SetConfig+0xc0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <TIM_Base_SetConfig+0xb8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800

080022d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 0201 	bic.w	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <TIM_TI1_SetConfig+0xa8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_TI1_SetConfig+0x46>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d007      	beq.n	800231a <TIM_TI1_SetConfig+0x46>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <TIM_TI1_SetConfig+0xac>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_TI1_SetConfig+0x46>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a1b      	ldr	r2, [pc, #108]	@ (8002384 <TIM_TI1_SetConfig+0xb0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <TIM_TI1_SetConfig+0x4a>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <TIM_TI1_SetConfig+0x4c>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e003      	b.n	800233e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	b2db      	uxtb	r3, r3
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f023 030a 	bic.w	r3, r3, #10
 8002358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 030a 	and.w	r3, r3, #10
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800

08002388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 0201 	bic.w	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 030a 	bic.w	r3, r3, #10
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f023 0210 	bic.w	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	b29b      	uxth	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002436:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f023 0210 	bic.w	r2, r3, #16
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	031b      	lsls	r3, r3, #12
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800250a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	621a      	str	r2, [r3, #32]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800255c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800256e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	031b      	lsls	r3, r3, #12
 8002574:	b29b      	uxth	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002582:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f043 0307 	orr.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	021a      	lsls	r2, r3, #8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	431a      	orrs	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2201      	movs	r2, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e046      	b.n	800270a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	@ (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c8:	d009      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	@ (800271c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <std>:
 8002744:	2300      	movs	r3, #0
 8002746:	b510      	push	{r4, lr}
 8002748:	4604      	mov	r4, r0
 800274a:	e9c0 3300 	strd	r3, r3, [r0]
 800274e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002752:	6083      	str	r3, [r0, #8]
 8002754:	8181      	strh	r1, [r0, #12]
 8002756:	6643      	str	r3, [r0, #100]	@ 0x64
 8002758:	81c2      	strh	r2, [r0, #14]
 800275a:	6183      	str	r3, [r0, #24]
 800275c:	4619      	mov	r1, r3
 800275e:	2208      	movs	r2, #8
 8002760:	305c      	adds	r0, #92	@ 0x5c
 8002762:	f000 f906 	bl	8002972 <memset>
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <std+0x58>)
 8002768:	6224      	str	r4, [r4, #32]
 800276a:	6263      	str	r3, [r4, #36]	@ 0x24
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <std+0x5c>)
 800276e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <std+0x60>)
 8002772:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <std+0x64>)
 8002776:	6323      	str	r3, [r4, #48]	@ 0x30
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <std+0x68>)
 800277a:	429c      	cmp	r4, r3
 800277c:	d006      	beq.n	800278c <std+0x48>
 800277e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002782:	4294      	cmp	r4, r2
 8002784:	d002      	beq.n	800278c <std+0x48>
 8002786:	33d0      	adds	r3, #208	@ 0xd0
 8002788:	429c      	cmp	r4, r3
 800278a:	d105      	bne.n	8002798 <std+0x54>
 800278c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002794:	f000 b966 	b.w	8002a64 <__retarget_lock_init_recursive>
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	080028ed 	.word	0x080028ed
 80027a0:	0800290f 	.word	0x0800290f
 80027a4:	08002947 	.word	0x08002947
 80027a8:	0800296b 	.word	0x0800296b
 80027ac:	200000f8 	.word	0x200000f8

080027b0 <stdio_exit_handler>:
 80027b0:	4a02      	ldr	r2, [pc, #8]	@ (80027bc <stdio_exit_handler+0xc>)
 80027b2:	4903      	ldr	r1, [pc, #12]	@ (80027c0 <stdio_exit_handler+0x10>)
 80027b4:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <stdio_exit_handler+0x14>)
 80027b6:	f000 b869 	b.w	800288c <_fwalk_sglue>
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	080032fd 	.word	0x080032fd
 80027c4:	2000001c 	.word	0x2000001c

080027c8 <cleanup_stdio>:
 80027c8:	6841      	ldr	r1, [r0, #4]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <cleanup_stdio+0x34>)
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4299      	cmp	r1, r3
 80027d0:	4604      	mov	r4, r0
 80027d2:	d001      	beq.n	80027d8 <cleanup_stdio+0x10>
 80027d4:	f000 fd92 	bl	80032fc <_fflush_r>
 80027d8:	68a1      	ldr	r1, [r4, #8]
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <cleanup_stdio+0x38>)
 80027dc:	4299      	cmp	r1, r3
 80027de:	d002      	beq.n	80027e6 <cleanup_stdio+0x1e>
 80027e0:	4620      	mov	r0, r4
 80027e2:	f000 fd8b 	bl	80032fc <_fflush_r>
 80027e6:	68e1      	ldr	r1, [r4, #12]
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <cleanup_stdio+0x3c>)
 80027ea:	4299      	cmp	r1, r3
 80027ec:	d004      	beq.n	80027f8 <cleanup_stdio+0x30>
 80027ee:	4620      	mov	r0, r4
 80027f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f4:	f000 bd82 	b.w	80032fc <_fflush_r>
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop
 80027fc:	200000f8 	.word	0x200000f8
 8002800:	20000160 	.word	0x20000160
 8002804:	200001c8 	.word	0x200001c8

08002808 <global_stdio_init.part.0>:
 8002808:	b510      	push	{r4, lr}
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <global_stdio_init.part.0+0x30>)
 800280c:	4c0b      	ldr	r4, [pc, #44]	@ (800283c <global_stdio_init.part.0+0x34>)
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <global_stdio_init.part.0+0x38>)
 8002810:	4620      	mov	r0, r4
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	2104      	movs	r1, #4
 8002816:	2200      	movs	r2, #0
 8002818:	f7ff ff94 	bl	8002744 <std>
 800281c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002820:	2201      	movs	r2, #1
 8002822:	2109      	movs	r1, #9
 8002824:	f7ff ff8e 	bl	8002744 <std>
 8002828:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800282c:	2202      	movs	r2, #2
 800282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002832:	2112      	movs	r1, #18
 8002834:	f7ff bf86 	b.w	8002744 <std>
 8002838:	20000230 	.word	0x20000230
 800283c:	200000f8 	.word	0x200000f8
 8002840:	080027b1 	.word	0x080027b1

08002844 <__sfp_lock_acquire>:
 8002844:	4801      	ldr	r0, [pc, #4]	@ (800284c <__sfp_lock_acquire+0x8>)
 8002846:	f000 b90e 	b.w	8002a66 <__retarget_lock_acquire_recursive>
 800284a:	bf00      	nop
 800284c:	20000239 	.word	0x20000239

08002850 <__sfp_lock_release>:
 8002850:	4801      	ldr	r0, [pc, #4]	@ (8002858 <__sfp_lock_release+0x8>)
 8002852:	f000 b909 	b.w	8002a68 <__retarget_lock_release_recursive>
 8002856:	bf00      	nop
 8002858:	20000239 	.word	0x20000239

0800285c <__sinit>:
 800285c:	b510      	push	{r4, lr}
 800285e:	4604      	mov	r4, r0
 8002860:	f7ff fff0 	bl	8002844 <__sfp_lock_acquire>
 8002864:	6a23      	ldr	r3, [r4, #32]
 8002866:	b11b      	cbz	r3, 8002870 <__sinit+0x14>
 8002868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800286c:	f7ff bff0 	b.w	8002850 <__sfp_lock_release>
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <__sinit+0x28>)
 8002872:	6223      	str	r3, [r4, #32]
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <__sinit+0x2c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f5      	bne.n	8002868 <__sinit+0xc>
 800287c:	f7ff ffc4 	bl	8002808 <global_stdio_init.part.0>
 8002880:	e7f2      	b.n	8002868 <__sinit+0xc>
 8002882:	bf00      	nop
 8002884:	080027c9 	.word	0x080027c9
 8002888:	20000230 	.word	0x20000230

0800288c <_fwalk_sglue>:
 800288c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002890:	4607      	mov	r7, r0
 8002892:	4688      	mov	r8, r1
 8002894:	4614      	mov	r4, r2
 8002896:	2600      	movs	r6, #0
 8002898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800289c:	f1b9 0901 	subs.w	r9, r9, #1
 80028a0:	d505      	bpl.n	80028ae <_fwalk_sglue+0x22>
 80028a2:	6824      	ldr	r4, [r4, #0]
 80028a4:	2c00      	cmp	r4, #0
 80028a6:	d1f7      	bne.n	8002898 <_fwalk_sglue+0xc>
 80028a8:	4630      	mov	r0, r6
 80028aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d907      	bls.n	80028c4 <_fwalk_sglue+0x38>
 80028b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028b8:	3301      	adds	r3, #1
 80028ba:	d003      	beq.n	80028c4 <_fwalk_sglue+0x38>
 80028bc:	4629      	mov	r1, r5
 80028be:	4638      	mov	r0, r7
 80028c0:	47c0      	blx	r8
 80028c2:	4306      	orrs	r6, r0
 80028c4:	3568      	adds	r5, #104	@ 0x68
 80028c6:	e7e9      	b.n	800289c <_fwalk_sglue+0x10>

080028c8 <iprintf>:
 80028c8:	b40f      	push	{r0, r1, r2, r3}
 80028ca:	b507      	push	{r0, r1, r2, lr}
 80028cc:	4906      	ldr	r1, [pc, #24]	@ (80028e8 <iprintf+0x20>)
 80028ce:	ab04      	add	r3, sp, #16
 80028d0:	6808      	ldr	r0, [r1, #0]
 80028d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80028d6:	6881      	ldr	r1, [r0, #8]
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	f000 f9e5 	bl	8002ca8 <_vfiprintf_r>
 80028de:	b003      	add	sp, #12
 80028e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028e4:	b004      	add	sp, #16
 80028e6:	4770      	bx	lr
 80028e8:	20000018 	.word	0x20000018

080028ec <__sread>:
 80028ec:	b510      	push	{r4, lr}
 80028ee:	460c      	mov	r4, r1
 80028f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f4:	f000 f868 	bl	80029c8 <_read_r>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	bfab      	itete	ge
 80028fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80028fe:	89a3      	ldrhlt	r3, [r4, #12]
 8002900:	181b      	addge	r3, r3, r0
 8002902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002906:	bfac      	ite	ge
 8002908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800290a:	81a3      	strhlt	r3, [r4, #12]
 800290c:	bd10      	pop	{r4, pc}

0800290e <__swrite>:
 800290e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002912:	461f      	mov	r7, r3
 8002914:	898b      	ldrh	r3, [r1, #12]
 8002916:	4605      	mov	r5, r0
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	460c      	mov	r4, r1
 800291c:	4616      	mov	r6, r2
 800291e:	d505      	bpl.n	800292c <__swrite+0x1e>
 8002920:	2302      	movs	r3, #2
 8002922:	2200      	movs	r2, #0
 8002924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002928:	f000 f83c 	bl	80029a4 <_lseek_r>
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	4632      	mov	r2, r6
 8002930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	4628      	mov	r0, r5
 8002938:	463b      	mov	r3, r7
 800293a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800293e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002942:	f000 b853 	b.w	80029ec <_write_r>

08002946 <__sseek>:
 8002946:	b510      	push	{r4, lr}
 8002948:	460c      	mov	r4, r1
 800294a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800294e:	f000 f829 	bl	80029a4 <_lseek_r>
 8002952:	1c43      	adds	r3, r0, #1
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	bf15      	itete	ne
 8002958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800295a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800295e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002962:	81a3      	strheq	r3, [r4, #12]
 8002964:	bf18      	it	ne
 8002966:	81a3      	strhne	r3, [r4, #12]
 8002968:	bd10      	pop	{r4, pc}

0800296a <__sclose>:
 800296a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800296e:	f000 b809 	b.w	8002984 <_close_r>

08002972 <memset>:
 8002972:	4603      	mov	r3, r0
 8002974:	4402      	add	r2, r0
 8002976:	4293      	cmp	r3, r2
 8002978:	d100      	bne.n	800297c <memset+0xa>
 800297a:	4770      	bx	lr
 800297c:	f803 1b01 	strb.w	r1, [r3], #1
 8002980:	e7f9      	b.n	8002976 <memset+0x4>
	...

08002984 <_close_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	2300      	movs	r3, #0
 8002988:	4d05      	ldr	r5, [pc, #20]	@ (80029a0 <_close_r+0x1c>)
 800298a:	4604      	mov	r4, r0
 800298c:	4608      	mov	r0, r1
 800298e:	602b      	str	r3, [r5, #0]
 8002990:	f7fd ffff 	bl	8000992 <_close>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d102      	bne.n	800299e <_close_r+0x1a>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	b103      	cbz	r3, 800299e <_close_r+0x1a>
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	20000234 	.word	0x20000234

080029a4 <_lseek_r>:
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	2200      	movs	r2, #0
 80029ae:	4d05      	ldr	r5, [pc, #20]	@ (80029c4 <_lseek_r+0x20>)
 80029b0:	602a      	str	r2, [r5, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7fe f811 	bl	80009da <_lseek>
 80029b8:	1c43      	adds	r3, r0, #1
 80029ba:	d102      	bne.n	80029c2 <_lseek_r+0x1e>
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	b103      	cbz	r3, 80029c2 <_lseek_r+0x1e>
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	20000234 	.word	0x20000234

080029c8 <_read_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	2200      	movs	r2, #0
 80029d2:	4d05      	ldr	r5, [pc, #20]	@ (80029e8 <_read_r+0x20>)
 80029d4:	602a      	str	r2, [r5, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f7fd ffa2 	bl	8000920 <_read>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d102      	bne.n	80029e6 <_read_r+0x1e>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	b103      	cbz	r3, 80029e6 <_read_r+0x1e>
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	20000234 	.word	0x20000234

080029ec <_write_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4604      	mov	r4, r0
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	2200      	movs	r2, #0
 80029f6:	4d05      	ldr	r5, [pc, #20]	@ (8002a0c <_write_r+0x20>)
 80029f8:	602a      	str	r2, [r5, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7fd ffad 	bl	800095a <_write>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	d102      	bne.n	8002a0a <_write_r+0x1e>
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	b103      	cbz	r3, 8002a0a <_write_r+0x1e>
 8002a08:	6023      	str	r3, [r4, #0]
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
 8002a0c:	20000234 	.word	0x20000234

08002a10 <__errno>:
 8002a10:	4b01      	ldr	r3, [pc, #4]	@ (8002a18 <__errno+0x8>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000018 	.word	0x20000018

08002a1c <__libc_init_array>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	2600      	movs	r6, #0
 8002a20:	4d0c      	ldr	r5, [pc, #48]	@ (8002a54 <__libc_init_array+0x38>)
 8002a22:	4c0d      	ldr	r4, [pc, #52]	@ (8002a58 <__libc_init_array+0x3c>)
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	42a6      	cmp	r6, r4
 8002a2a:	d109      	bne.n	8002a40 <__libc_init_array+0x24>
 8002a2c:	f000 fdc4 	bl	80035b8 <_init>
 8002a30:	2600      	movs	r6, #0
 8002a32:	4d0a      	ldr	r5, [pc, #40]	@ (8002a5c <__libc_init_array+0x40>)
 8002a34:	4c0a      	ldr	r4, [pc, #40]	@ (8002a60 <__libc_init_array+0x44>)
 8002a36:	1b64      	subs	r4, r4, r5
 8002a38:	10a4      	asrs	r4, r4, #2
 8002a3a:	42a6      	cmp	r6, r4
 8002a3c:	d105      	bne.n	8002a4a <__libc_init_array+0x2e>
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a44:	4798      	blx	r3
 8002a46:	3601      	adds	r6, #1
 8002a48:	e7ee      	b.n	8002a28 <__libc_init_array+0xc>
 8002a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4e:	4798      	blx	r3
 8002a50:	3601      	adds	r6, #1
 8002a52:	e7f2      	b.n	8002a3a <__libc_init_array+0x1e>
 8002a54:	0800363c 	.word	0x0800363c
 8002a58:	0800363c 	.word	0x0800363c
 8002a5c:	0800363c 	.word	0x0800363c
 8002a60:	08003640 	.word	0x08003640

08002a64 <__retarget_lock_init_recursive>:
 8002a64:	4770      	bx	lr

08002a66 <__retarget_lock_acquire_recursive>:
 8002a66:	4770      	bx	lr

08002a68 <__retarget_lock_release_recursive>:
 8002a68:	4770      	bx	lr
	...

08002a6c <_free_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4605      	mov	r5, r0
 8002a70:	2900      	cmp	r1, #0
 8002a72:	d040      	beq.n	8002af6 <_free_r+0x8a>
 8002a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a78:	1f0c      	subs	r4, r1, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bfb8      	it	lt
 8002a7e:	18e4      	addlt	r4, r4, r3
 8002a80:	f000 f8de 	bl	8002c40 <__malloc_lock>
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <_free_r+0x8c>)
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	b933      	cbnz	r3, 8002a98 <_free_r+0x2c>
 8002a8a:	6063      	str	r3, [r4, #4]
 8002a8c:	6014      	str	r4, [r2, #0]
 8002a8e:	4628      	mov	r0, r5
 8002a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a94:	f000 b8da 	b.w	8002c4c <__malloc_unlock>
 8002a98:	42a3      	cmp	r3, r4
 8002a9a:	d908      	bls.n	8002aae <_free_r+0x42>
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	1821      	adds	r1, r4, r0
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	bf01      	itttt	eq
 8002aa4:	6819      	ldreq	r1, [r3, #0]
 8002aa6:	685b      	ldreq	r3, [r3, #4]
 8002aa8:	1809      	addeq	r1, r1, r0
 8002aaa:	6021      	streq	r1, [r4, #0]
 8002aac:	e7ed      	b.n	8002a8a <_free_r+0x1e>
 8002aae:	461a      	mov	r2, r3
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	b10b      	cbz	r3, 8002ab8 <_free_r+0x4c>
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	d9fa      	bls.n	8002aae <_free_r+0x42>
 8002ab8:	6811      	ldr	r1, [r2, #0]
 8002aba:	1850      	adds	r0, r2, r1
 8002abc:	42a0      	cmp	r0, r4
 8002abe:	d10b      	bne.n	8002ad8 <_free_r+0x6c>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	4401      	add	r1, r0
 8002ac4:	1850      	adds	r0, r2, r1
 8002ac6:	4283      	cmp	r3, r0
 8002ac8:	6011      	str	r1, [r2, #0]
 8002aca:	d1e0      	bne.n	8002a8e <_free_r+0x22>
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4408      	add	r0, r1
 8002ad2:	6010      	str	r0, [r2, #0]
 8002ad4:	6053      	str	r3, [r2, #4]
 8002ad6:	e7da      	b.n	8002a8e <_free_r+0x22>
 8002ad8:	d902      	bls.n	8002ae0 <_free_r+0x74>
 8002ada:	230c      	movs	r3, #12
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	e7d6      	b.n	8002a8e <_free_r+0x22>
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	1821      	adds	r1, r4, r0
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	bf01      	itttt	eq
 8002ae8:	6819      	ldreq	r1, [r3, #0]
 8002aea:	685b      	ldreq	r3, [r3, #4]
 8002aec:	1809      	addeq	r1, r1, r0
 8002aee:	6021      	streq	r1, [r4, #0]
 8002af0:	6063      	str	r3, [r4, #4]
 8002af2:	6054      	str	r4, [r2, #4]
 8002af4:	e7cb      	b.n	8002a8e <_free_r+0x22>
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	20000240 	.word	0x20000240

08002afc <sbrk_aligned>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	4e0f      	ldr	r6, [pc, #60]	@ (8002b3c <sbrk_aligned+0x40>)
 8002b00:	460c      	mov	r4, r1
 8002b02:	6831      	ldr	r1, [r6, #0]
 8002b04:	4605      	mov	r5, r0
 8002b06:	b911      	cbnz	r1, 8002b0e <sbrk_aligned+0x12>
 8002b08:	f000 fcb4 	bl	8003474 <_sbrk_r>
 8002b0c:	6030      	str	r0, [r6, #0]
 8002b0e:	4621      	mov	r1, r4
 8002b10:	4628      	mov	r0, r5
 8002b12:	f000 fcaf 	bl	8003474 <_sbrk_r>
 8002b16:	1c43      	adds	r3, r0, #1
 8002b18:	d103      	bne.n	8002b22 <sbrk_aligned+0x26>
 8002b1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002b1e:	4620      	mov	r0, r4
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	1cc4      	adds	r4, r0, #3
 8002b24:	f024 0403 	bic.w	r4, r4, #3
 8002b28:	42a0      	cmp	r0, r4
 8002b2a:	d0f8      	beq.n	8002b1e <sbrk_aligned+0x22>
 8002b2c:	1a21      	subs	r1, r4, r0
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 fca0 	bl	8003474 <_sbrk_r>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d1f2      	bne.n	8002b1e <sbrk_aligned+0x22>
 8002b38:	e7ef      	b.n	8002b1a <sbrk_aligned+0x1e>
 8002b3a:	bf00      	nop
 8002b3c:	2000023c 	.word	0x2000023c

08002b40 <_malloc_r>:
 8002b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b44:	1ccd      	adds	r5, r1, #3
 8002b46:	f025 0503 	bic.w	r5, r5, #3
 8002b4a:	3508      	adds	r5, #8
 8002b4c:	2d0c      	cmp	r5, #12
 8002b4e:	bf38      	it	cc
 8002b50:	250c      	movcc	r5, #12
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	4606      	mov	r6, r0
 8002b56:	db01      	blt.n	8002b5c <_malloc_r+0x1c>
 8002b58:	42a9      	cmp	r1, r5
 8002b5a:	d904      	bls.n	8002b66 <_malloc_r+0x26>
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	6033      	str	r3, [r6, #0]
 8002b60:	2000      	movs	r0, #0
 8002b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c3c <_malloc_r+0xfc>
 8002b6a:	f000 f869 	bl	8002c40 <__malloc_lock>
 8002b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b72:	461c      	mov	r4, r3
 8002b74:	bb44      	cbnz	r4, 8002bc8 <_malloc_r+0x88>
 8002b76:	4629      	mov	r1, r5
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f7ff ffbf 	bl	8002afc <sbrk_aligned>
 8002b7e:	1c43      	adds	r3, r0, #1
 8002b80:	4604      	mov	r4, r0
 8002b82:	d158      	bne.n	8002c36 <_malloc_r+0xf6>
 8002b84:	f8d8 4000 	ldr.w	r4, [r8]
 8002b88:	4627      	mov	r7, r4
 8002b8a:	2f00      	cmp	r7, #0
 8002b8c:	d143      	bne.n	8002c16 <_malloc_r+0xd6>
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d04b      	beq.n	8002c2a <_malloc_r+0xea>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	4639      	mov	r1, r7
 8002b96:	4630      	mov	r0, r6
 8002b98:	eb04 0903 	add.w	r9, r4, r3
 8002b9c:	f000 fc6a 	bl	8003474 <_sbrk_r>
 8002ba0:	4581      	cmp	r9, r0
 8002ba2:	d142      	bne.n	8002c2a <_malloc_r+0xea>
 8002ba4:	6821      	ldr	r1, [r4, #0]
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	1a6d      	subs	r5, r5, r1
 8002baa:	4629      	mov	r1, r5
 8002bac:	f7ff ffa6 	bl	8002afc <sbrk_aligned>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d03a      	beq.n	8002c2a <_malloc_r+0xea>
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	442b      	add	r3, r5
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	f8d8 3000 	ldr.w	r3, [r8]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	bb62      	cbnz	r2, 8002c1c <_malloc_r+0xdc>
 8002bc2:	f8c8 7000 	str.w	r7, [r8]
 8002bc6:	e00f      	b.n	8002be8 <_malloc_r+0xa8>
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	1b52      	subs	r2, r2, r5
 8002bcc:	d420      	bmi.n	8002c10 <_malloc_r+0xd0>
 8002bce:	2a0b      	cmp	r2, #11
 8002bd0:	d917      	bls.n	8002c02 <_malloc_r+0xc2>
 8002bd2:	1961      	adds	r1, r4, r5
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	6025      	str	r5, [r4, #0]
 8002bd8:	bf18      	it	ne
 8002bda:	6059      	strne	r1, [r3, #4]
 8002bdc:	6863      	ldr	r3, [r4, #4]
 8002bde:	bf08      	it	eq
 8002be0:	f8c8 1000 	streq.w	r1, [r8]
 8002be4:	5162      	str	r2, [r4, r5]
 8002be6:	604b      	str	r3, [r1, #4]
 8002be8:	4630      	mov	r0, r6
 8002bea:	f000 f82f 	bl	8002c4c <__malloc_unlock>
 8002bee:	f104 000b 	add.w	r0, r4, #11
 8002bf2:	1d23      	adds	r3, r4, #4
 8002bf4:	f020 0007 	bic.w	r0, r0, #7
 8002bf8:	1ac2      	subs	r2, r0, r3
 8002bfa:	bf1c      	itt	ne
 8002bfc:	1a1b      	subne	r3, r3, r0
 8002bfe:	50a3      	strne	r3, [r4, r2]
 8002c00:	e7af      	b.n	8002b62 <_malloc_r+0x22>
 8002c02:	6862      	ldr	r2, [r4, #4]
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	bf0c      	ite	eq
 8002c08:	f8c8 2000 	streq.w	r2, [r8]
 8002c0c:	605a      	strne	r2, [r3, #4]
 8002c0e:	e7eb      	b.n	8002be8 <_malloc_r+0xa8>
 8002c10:	4623      	mov	r3, r4
 8002c12:	6864      	ldr	r4, [r4, #4]
 8002c14:	e7ae      	b.n	8002b74 <_malloc_r+0x34>
 8002c16:	463c      	mov	r4, r7
 8002c18:	687f      	ldr	r7, [r7, #4]
 8002c1a:	e7b6      	b.n	8002b8a <_malloc_r+0x4a>
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d1fb      	bne.n	8002c1c <_malloc_r+0xdc>
 8002c24:	2300      	movs	r3, #0
 8002c26:	6053      	str	r3, [r2, #4]
 8002c28:	e7de      	b.n	8002be8 <_malloc_r+0xa8>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	6033      	str	r3, [r6, #0]
 8002c30:	f000 f80c 	bl	8002c4c <__malloc_unlock>
 8002c34:	e794      	b.n	8002b60 <_malloc_r+0x20>
 8002c36:	6005      	str	r5, [r0, #0]
 8002c38:	e7d6      	b.n	8002be8 <_malloc_r+0xa8>
 8002c3a:	bf00      	nop
 8002c3c:	20000240 	.word	0x20000240

08002c40 <__malloc_lock>:
 8002c40:	4801      	ldr	r0, [pc, #4]	@ (8002c48 <__malloc_lock+0x8>)
 8002c42:	f7ff bf10 	b.w	8002a66 <__retarget_lock_acquire_recursive>
 8002c46:	bf00      	nop
 8002c48:	20000238 	.word	0x20000238

08002c4c <__malloc_unlock>:
 8002c4c:	4801      	ldr	r0, [pc, #4]	@ (8002c54 <__malloc_unlock+0x8>)
 8002c4e:	f7ff bf0b 	b.w	8002a68 <__retarget_lock_release_recursive>
 8002c52:	bf00      	nop
 8002c54:	20000238 	.word	0x20000238

08002c58 <__sfputc_r>:
 8002c58:	6893      	ldr	r3, [r2, #8]
 8002c5a:	b410      	push	{r4}
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	6093      	str	r3, [r2, #8]
 8002c62:	da07      	bge.n	8002c74 <__sfputc_r+0x1c>
 8002c64:	6994      	ldr	r4, [r2, #24]
 8002c66:	42a3      	cmp	r3, r4
 8002c68:	db01      	blt.n	8002c6e <__sfputc_r+0x16>
 8002c6a:	290a      	cmp	r1, #10
 8002c6c:	d102      	bne.n	8002c74 <__sfputc_r+0x1c>
 8002c6e:	bc10      	pop	{r4}
 8002c70:	f000 bb6c 	b.w	800334c <__swbuf_r>
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	1c58      	adds	r0, r3, #1
 8002c78:	6010      	str	r0, [r2, #0]
 8002c7a:	7019      	strb	r1, [r3, #0]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	bc10      	pop	{r4}
 8002c80:	4770      	bx	lr

08002c82 <__sfputs_r>:
 8002c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c84:	4606      	mov	r6, r0
 8002c86:	460f      	mov	r7, r1
 8002c88:	4614      	mov	r4, r2
 8002c8a:	18d5      	adds	r5, r2, r3
 8002c8c:	42ac      	cmp	r4, r5
 8002c8e:	d101      	bne.n	8002c94 <__sfputs_r+0x12>
 8002c90:	2000      	movs	r0, #0
 8002c92:	e007      	b.n	8002ca4 <__sfputs_r+0x22>
 8002c94:	463a      	mov	r2, r7
 8002c96:	4630      	mov	r0, r6
 8002c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c9c:	f7ff ffdc 	bl	8002c58 <__sfputc_r>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d1f3      	bne.n	8002c8c <__sfputs_r+0xa>
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ca8 <_vfiprintf_r>:
 8002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cac:	460d      	mov	r5, r1
 8002cae:	4614      	mov	r4, r2
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	b09d      	sub	sp, #116	@ 0x74
 8002cb6:	b118      	cbz	r0, 8002cc0 <_vfiprintf_r+0x18>
 8002cb8:	6a03      	ldr	r3, [r0, #32]
 8002cba:	b90b      	cbnz	r3, 8002cc0 <_vfiprintf_r+0x18>
 8002cbc:	f7ff fdce 	bl	800285c <__sinit>
 8002cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cc2:	07d9      	lsls	r1, r3, #31
 8002cc4:	d405      	bmi.n	8002cd2 <_vfiprintf_r+0x2a>
 8002cc6:	89ab      	ldrh	r3, [r5, #12]
 8002cc8:	059a      	lsls	r2, r3, #22
 8002cca:	d402      	bmi.n	8002cd2 <_vfiprintf_r+0x2a>
 8002ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cce:	f7ff feca 	bl	8002a66 <__retarget_lock_acquire_recursive>
 8002cd2:	89ab      	ldrh	r3, [r5, #12]
 8002cd4:	071b      	lsls	r3, r3, #28
 8002cd6:	d501      	bpl.n	8002cdc <_vfiprintf_r+0x34>
 8002cd8:	692b      	ldr	r3, [r5, #16]
 8002cda:	b99b      	cbnz	r3, 8002d04 <_vfiprintf_r+0x5c>
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f000 fb72 	bl	80033c8 <__swsetup_r>
 8002ce4:	b170      	cbz	r0, 8002d04 <_vfiprintf_r+0x5c>
 8002ce6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ce8:	07dc      	lsls	r4, r3, #31
 8002cea:	d504      	bpl.n	8002cf6 <_vfiprintf_r+0x4e>
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cf0:	b01d      	add	sp, #116	@ 0x74
 8002cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf6:	89ab      	ldrh	r3, [r5, #12]
 8002cf8:	0598      	lsls	r0, r3, #22
 8002cfa:	d4f7      	bmi.n	8002cec <_vfiprintf_r+0x44>
 8002cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cfe:	f7ff feb3 	bl	8002a68 <__retarget_lock_release_recursive>
 8002d02:	e7f3      	b.n	8002cec <_vfiprintf_r+0x44>
 8002d04:	2300      	movs	r3, #0
 8002d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d08:	2320      	movs	r3, #32
 8002d0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d0e:	2330      	movs	r3, #48	@ 0x30
 8002d10:	f04f 0901 	mov.w	r9, #1
 8002d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002ec4 <_vfiprintf_r+0x21c>
 8002d1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d20:	4623      	mov	r3, r4
 8002d22:	469a      	mov	sl, r3
 8002d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d28:	b10a      	cbz	r2, 8002d2e <_vfiprintf_r+0x86>
 8002d2a:	2a25      	cmp	r2, #37	@ 0x25
 8002d2c:	d1f9      	bne.n	8002d22 <_vfiprintf_r+0x7a>
 8002d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d32:	d00b      	beq.n	8002d4c <_vfiprintf_r+0xa4>
 8002d34:	465b      	mov	r3, fp
 8002d36:	4622      	mov	r2, r4
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff ffa1 	bl	8002c82 <__sfputs_r>
 8002d40:	3001      	adds	r0, #1
 8002d42:	f000 80a7 	beq.w	8002e94 <_vfiprintf_r+0x1ec>
 8002d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d48:	445a      	add	r2, fp
 8002d4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 809f 	beq.w	8002e94 <_vfiprintf_r+0x1ec>
 8002d56:	2300      	movs	r3, #0
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d60:	f10a 0a01 	add.w	sl, sl, #1
 8002d64:	9304      	str	r3, [sp, #16]
 8002d66:	9307      	str	r3, [sp, #28]
 8002d68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d6e:	4654      	mov	r4, sl
 8002d70:	2205      	movs	r2, #5
 8002d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d76:	4853      	ldr	r0, [pc, #332]	@ (8002ec4 <_vfiprintf_r+0x21c>)
 8002d78:	f000 fb8c 	bl	8003494 <memchr>
 8002d7c:	9a04      	ldr	r2, [sp, #16]
 8002d7e:	b9d8      	cbnz	r0, 8002db8 <_vfiprintf_r+0x110>
 8002d80:	06d1      	lsls	r1, r2, #27
 8002d82:	bf44      	itt	mi
 8002d84:	2320      	movmi	r3, #32
 8002d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d8a:	0713      	lsls	r3, r2, #28
 8002d8c:	bf44      	itt	mi
 8002d8e:	232b      	movmi	r3, #43	@ 0x2b
 8002d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d94:	f89a 3000 	ldrb.w	r3, [sl]
 8002d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d9a:	d015      	beq.n	8002dc8 <_vfiprintf_r+0x120>
 8002d9c:	4654      	mov	r4, sl
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f04f 0c0a 	mov.w	ip, #10
 8002da4:	9a07      	ldr	r2, [sp, #28]
 8002da6:	4621      	mov	r1, r4
 8002da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dac:	3b30      	subs	r3, #48	@ 0x30
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d94b      	bls.n	8002e4a <_vfiprintf_r+0x1a2>
 8002db2:	b1b0      	cbz	r0, 8002de2 <_vfiprintf_r+0x13a>
 8002db4:	9207      	str	r2, [sp, #28]
 8002db6:	e014      	b.n	8002de2 <_vfiprintf_r+0x13a>
 8002db8:	eba0 0308 	sub.w	r3, r0, r8
 8002dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	46a2      	mov	sl, r4
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	e7d2      	b.n	8002d6e <_vfiprintf_r+0xc6>
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	1d19      	adds	r1, r3, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	9103      	str	r1, [sp, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bfbb      	ittet	lt
 8002dd4:	425b      	neglt	r3, r3
 8002dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8002dda:	9307      	strge	r3, [sp, #28]
 8002ddc:	9307      	strlt	r3, [sp, #28]
 8002dde:	bfb8      	it	lt
 8002de0:	9204      	strlt	r2, [sp, #16]
 8002de2:	7823      	ldrb	r3, [r4, #0]
 8002de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002de6:	d10a      	bne.n	8002dfe <_vfiprintf_r+0x156>
 8002de8:	7863      	ldrb	r3, [r4, #1]
 8002dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dec:	d132      	bne.n	8002e54 <_vfiprintf_r+0x1ac>
 8002dee:	9b03      	ldr	r3, [sp, #12]
 8002df0:	3402      	adds	r4, #2
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	9203      	str	r2, [sp, #12]
 8002df8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dfc:	9305      	str	r3, [sp, #20]
 8002dfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002ec8 <_vfiprintf_r+0x220>
 8002e02:	2203      	movs	r2, #3
 8002e04:	4650      	mov	r0, sl
 8002e06:	7821      	ldrb	r1, [r4, #0]
 8002e08:	f000 fb44 	bl	8003494 <memchr>
 8002e0c:	b138      	cbz	r0, 8002e1e <_vfiprintf_r+0x176>
 8002e0e:	2240      	movs	r2, #64	@ 0x40
 8002e10:	9b04      	ldr	r3, [sp, #16]
 8002e12:	eba0 000a 	sub.w	r0, r0, sl
 8002e16:	4082      	lsls	r2, r0
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	9304      	str	r3, [sp, #16]
 8002e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e22:	2206      	movs	r2, #6
 8002e24:	4829      	ldr	r0, [pc, #164]	@ (8002ecc <_vfiprintf_r+0x224>)
 8002e26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e2a:	f000 fb33 	bl	8003494 <memchr>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d03f      	beq.n	8002eb2 <_vfiprintf_r+0x20a>
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <_vfiprintf_r+0x228>)
 8002e34:	bb1b      	cbnz	r3, 8002e7e <_vfiprintf_r+0x1d6>
 8002e36:	9b03      	ldr	r3, [sp, #12]
 8002e38:	3307      	adds	r3, #7
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	3308      	adds	r3, #8
 8002e40:	9303      	str	r3, [sp, #12]
 8002e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e44:	443b      	add	r3, r7
 8002e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e48:	e76a      	b.n	8002d20 <_vfiprintf_r+0x78>
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e52:	e7a8      	b.n	8002da6 <_vfiprintf_r+0xfe>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f04f 0c0a 	mov.w	ip, #10
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	3401      	adds	r4, #1
 8002e5e:	9305      	str	r3, [sp, #20]
 8002e60:	4620      	mov	r0, r4
 8002e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e66:	3a30      	subs	r2, #48	@ 0x30
 8002e68:	2a09      	cmp	r2, #9
 8002e6a:	d903      	bls.n	8002e74 <_vfiprintf_r+0x1cc>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0c6      	beq.n	8002dfe <_vfiprintf_r+0x156>
 8002e70:	9105      	str	r1, [sp, #20]
 8002e72:	e7c4      	b.n	8002dfe <_vfiprintf_r+0x156>
 8002e74:	4604      	mov	r4, r0
 8002e76:	2301      	movs	r3, #1
 8002e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e7c:	e7f0      	b.n	8002e60 <_vfiprintf_r+0x1b8>
 8002e7e:	ab03      	add	r3, sp, #12
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	462a      	mov	r2, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <_vfiprintf_r+0x22c>)
 8002e88:	a904      	add	r1, sp, #16
 8002e8a:	f3af 8000 	nop.w
 8002e8e:	4607      	mov	r7, r0
 8002e90:	1c78      	adds	r0, r7, #1
 8002e92:	d1d6      	bne.n	8002e42 <_vfiprintf_r+0x19a>
 8002e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e96:	07d9      	lsls	r1, r3, #31
 8002e98:	d405      	bmi.n	8002ea6 <_vfiprintf_r+0x1fe>
 8002e9a:	89ab      	ldrh	r3, [r5, #12]
 8002e9c:	059a      	lsls	r2, r3, #22
 8002e9e:	d402      	bmi.n	8002ea6 <_vfiprintf_r+0x1fe>
 8002ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ea2:	f7ff fde1 	bl	8002a68 <__retarget_lock_release_recursive>
 8002ea6:	89ab      	ldrh	r3, [r5, #12]
 8002ea8:	065b      	lsls	r3, r3, #25
 8002eaa:	f53f af1f 	bmi.w	8002cec <_vfiprintf_r+0x44>
 8002eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002eb0:	e71e      	b.n	8002cf0 <_vfiprintf_r+0x48>
 8002eb2:	ab03      	add	r3, sp, #12
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	4630      	mov	r0, r6
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <_vfiprintf_r+0x22c>)
 8002ebc:	a904      	add	r1, sp, #16
 8002ebe:	f000 f87d 	bl	8002fbc <_printf_i>
 8002ec2:	e7e4      	b.n	8002e8e <_vfiprintf_r+0x1e6>
 8002ec4:	08003606 	.word	0x08003606
 8002ec8:	0800360c 	.word	0x0800360c
 8002ecc:	08003610 	.word	0x08003610
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	08002c83 	.word	0x08002c83

08002ed8 <_printf_common>:
 8002ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002edc:	4616      	mov	r6, r2
 8002ede:	4698      	mov	r8, r3
 8002ee0:	688a      	ldr	r2, [r1, #8]
 8002ee2:	690b      	ldr	r3, [r1, #16]
 8002ee4:	4607      	mov	r7, r0
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	bfb8      	it	lt
 8002eea:	4613      	movlt	r3, r2
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ef8:	b10a      	cbz	r2, 8002efe <_printf_common+0x26>
 8002efa:	3301      	adds	r3, #1
 8002efc:	6033      	str	r3, [r6, #0]
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	0699      	lsls	r1, r3, #26
 8002f02:	bf42      	ittt	mi
 8002f04:	6833      	ldrmi	r3, [r6, #0]
 8002f06:	3302      	addmi	r3, #2
 8002f08:	6033      	strmi	r3, [r6, #0]
 8002f0a:	6825      	ldr	r5, [r4, #0]
 8002f0c:	f015 0506 	ands.w	r5, r5, #6
 8002f10:	d106      	bne.n	8002f20 <_printf_common+0x48>
 8002f12:	f104 0a19 	add.w	sl, r4, #25
 8002f16:	68e3      	ldr	r3, [r4, #12]
 8002f18:	6832      	ldr	r2, [r6, #0]
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	42ab      	cmp	r3, r5
 8002f1e:	dc2b      	bgt.n	8002f78 <_printf_common+0xa0>
 8002f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	3b00      	subs	r3, #0
 8002f28:	bf18      	it	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	0692      	lsls	r2, r2, #26
 8002f2e:	d430      	bmi.n	8002f92 <_printf_common+0xba>
 8002f30:	4641      	mov	r1, r8
 8002f32:	4638      	mov	r0, r7
 8002f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f38:	47c8      	blx	r9
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d023      	beq.n	8002f86 <_printf_common+0xae>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	6922      	ldr	r2, [r4, #16]
 8002f42:	f003 0306 	and.w	r3, r3, #6
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf14      	ite	ne
 8002f4a:	2500      	movne	r5, #0
 8002f4c:	6833      	ldreq	r3, [r6, #0]
 8002f4e:	f04f 0600 	mov.w	r6, #0
 8002f52:	bf08      	it	eq
 8002f54:	68e5      	ldreq	r5, [r4, #12]
 8002f56:	f104 041a 	add.w	r4, r4, #26
 8002f5a:	bf08      	it	eq
 8002f5c:	1aed      	subeq	r5, r5, r3
 8002f5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f62:	bf08      	it	eq
 8002f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bfc4      	itt	gt
 8002f6c:	1a9b      	subgt	r3, r3, r2
 8002f6e:	18ed      	addgt	r5, r5, r3
 8002f70:	42b5      	cmp	r5, r6
 8002f72:	d11a      	bne.n	8002faa <_printf_common+0xd2>
 8002f74:	2000      	movs	r0, #0
 8002f76:	e008      	b.n	8002f8a <_printf_common+0xb2>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	4638      	mov	r0, r7
 8002f80:	47c8      	blx	r9
 8002f82:	3001      	adds	r0, #1
 8002f84:	d103      	bne.n	8002f8e <_printf_common+0xb6>
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8e:	3501      	adds	r5, #1
 8002f90:	e7c1      	b.n	8002f16 <_printf_common+0x3e>
 8002f92:	2030      	movs	r0, #48	@ 0x30
 8002f94:	18e1      	adds	r1, r4, r3
 8002f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fa0:	4422      	add	r2, r4
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fa8:	e7c2      	b.n	8002f30 <_printf_common+0x58>
 8002faa:	2301      	movs	r3, #1
 8002fac:	4622      	mov	r2, r4
 8002fae:	4641      	mov	r1, r8
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	47c8      	blx	r9
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d0e6      	beq.n	8002f86 <_printf_common+0xae>
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7d9      	b.n	8002f70 <_printf_common+0x98>

08002fbc <_printf_i>:
 8002fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc0:	7e0f      	ldrb	r7, [r1, #24]
 8002fc2:	4691      	mov	r9, r2
 8002fc4:	2f78      	cmp	r7, #120	@ 0x78
 8002fc6:	4680      	mov	r8, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	469a      	mov	sl, r3
 8002fcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fd2:	d807      	bhi.n	8002fe4 <_printf_i+0x28>
 8002fd4:	2f62      	cmp	r7, #98	@ 0x62
 8002fd6:	d80a      	bhi.n	8002fee <_printf_i+0x32>
 8002fd8:	2f00      	cmp	r7, #0
 8002fda:	f000 80d3 	beq.w	8003184 <_printf_i+0x1c8>
 8002fde:	2f58      	cmp	r7, #88	@ 0x58
 8002fe0:	f000 80ba 	beq.w	8003158 <_printf_i+0x19c>
 8002fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fec:	e03a      	b.n	8003064 <_printf_i+0xa8>
 8002fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ff2:	2b15      	cmp	r3, #21
 8002ff4:	d8f6      	bhi.n	8002fe4 <_printf_i+0x28>
 8002ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8002ffc <_printf_i+0x40>)
 8002ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ffc:	08003055 	.word	0x08003055
 8003000:	08003069 	.word	0x08003069
 8003004:	08002fe5 	.word	0x08002fe5
 8003008:	08002fe5 	.word	0x08002fe5
 800300c:	08002fe5 	.word	0x08002fe5
 8003010:	08002fe5 	.word	0x08002fe5
 8003014:	08003069 	.word	0x08003069
 8003018:	08002fe5 	.word	0x08002fe5
 800301c:	08002fe5 	.word	0x08002fe5
 8003020:	08002fe5 	.word	0x08002fe5
 8003024:	08002fe5 	.word	0x08002fe5
 8003028:	0800316b 	.word	0x0800316b
 800302c:	08003093 	.word	0x08003093
 8003030:	08003125 	.word	0x08003125
 8003034:	08002fe5 	.word	0x08002fe5
 8003038:	08002fe5 	.word	0x08002fe5
 800303c:	0800318d 	.word	0x0800318d
 8003040:	08002fe5 	.word	0x08002fe5
 8003044:	08003093 	.word	0x08003093
 8003048:	08002fe5 	.word	0x08002fe5
 800304c:	08002fe5 	.word	0x08002fe5
 8003050:	0800312d 	.word	0x0800312d
 8003054:	6833      	ldr	r3, [r6, #0]
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6032      	str	r2, [r6, #0]
 800305c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003064:	2301      	movs	r3, #1
 8003066:	e09e      	b.n	80031a6 <_printf_i+0x1ea>
 8003068:	6833      	ldr	r3, [r6, #0]
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	1d19      	adds	r1, r3, #4
 800306e:	6031      	str	r1, [r6, #0]
 8003070:	0606      	lsls	r6, r0, #24
 8003072:	d501      	bpl.n	8003078 <_printf_i+0xbc>
 8003074:	681d      	ldr	r5, [r3, #0]
 8003076:	e003      	b.n	8003080 <_printf_i+0xc4>
 8003078:	0645      	lsls	r5, r0, #25
 800307a:	d5fb      	bpl.n	8003074 <_printf_i+0xb8>
 800307c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003080:	2d00      	cmp	r5, #0
 8003082:	da03      	bge.n	800308c <_printf_i+0xd0>
 8003084:	232d      	movs	r3, #45	@ 0x2d
 8003086:	426d      	negs	r5, r5
 8003088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800308c:	230a      	movs	r3, #10
 800308e:	4859      	ldr	r0, [pc, #356]	@ (80031f4 <_printf_i+0x238>)
 8003090:	e011      	b.n	80030b6 <_printf_i+0xfa>
 8003092:	6821      	ldr	r1, [r4, #0]
 8003094:	6833      	ldr	r3, [r6, #0]
 8003096:	0608      	lsls	r0, r1, #24
 8003098:	f853 5b04 	ldr.w	r5, [r3], #4
 800309c:	d402      	bmi.n	80030a4 <_printf_i+0xe8>
 800309e:	0649      	lsls	r1, r1, #25
 80030a0:	bf48      	it	mi
 80030a2:	b2ad      	uxthmi	r5, r5
 80030a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80030a6:	6033      	str	r3, [r6, #0]
 80030a8:	bf14      	ite	ne
 80030aa:	230a      	movne	r3, #10
 80030ac:	2308      	moveq	r3, #8
 80030ae:	4851      	ldr	r0, [pc, #324]	@ (80031f4 <_printf_i+0x238>)
 80030b0:	2100      	movs	r1, #0
 80030b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030b6:	6866      	ldr	r6, [r4, #4]
 80030b8:	2e00      	cmp	r6, #0
 80030ba:	bfa8      	it	ge
 80030bc:	6821      	ldrge	r1, [r4, #0]
 80030be:	60a6      	str	r6, [r4, #8]
 80030c0:	bfa4      	itt	ge
 80030c2:	f021 0104 	bicge.w	r1, r1, #4
 80030c6:	6021      	strge	r1, [r4, #0]
 80030c8:	b90d      	cbnz	r5, 80030ce <_printf_i+0x112>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	d04b      	beq.n	8003166 <_printf_i+0x1aa>
 80030ce:	4616      	mov	r6, r2
 80030d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80030d4:	fb03 5711 	mls	r7, r3, r1, r5
 80030d8:	5dc7      	ldrb	r7, [r0, r7]
 80030da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030de:	462f      	mov	r7, r5
 80030e0:	42bb      	cmp	r3, r7
 80030e2:	460d      	mov	r5, r1
 80030e4:	d9f4      	bls.n	80030d0 <_printf_i+0x114>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d10b      	bne.n	8003102 <_printf_i+0x146>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	07df      	lsls	r7, r3, #31
 80030ee:	d508      	bpl.n	8003102 <_printf_i+0x146>
 80030f0:	6923      	ldr	r3, [r4, #16]
 80030f2:	6861      	ldr	r1, [r4, #4]
 80030f4:	4299      	cmp	r1, r3
 80030f6:	bfde      	ittt	le
 80030f8:	2330      	movle	r3, #48	@ 0x30
 80030fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003102:	1b92      	subs	r2, r2, r6
 8003104:	6122      	str	r2, [r4, #16]
 8003106:	464b      	mov	r3, r9
 8003108:	4621      	mov	r1, r4
 800310a:	4640      	mov	r0, r8
 800310c:	f8cd a000 	str.w	sl, [sp]
 8003110:	aa03      	add	r2, sp, #12
 8003112:	f7ff fee1 	bl	8002ed8 <_printf_common>
 8003116:	3001      	adds	r0, #1
 8003118:	d14a      	bne.n	80031b0 <_printf_i+0x1f4>
 800311a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800311e:	b004      	add	sp, #16
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	f043 0320 	orr.w	r3, r3, #32
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	2778      	movs	r7, #120	@ 0x78
 800312e:	4832      	ldr	r0, [pc, #200]	@ (80031f8 <_printf_i+0x23c>)
 8003130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	6831      	ldr	r1, [r6, #0]
 8003138:	061f      	lsls	r7, r3, #24
 800313a:	f851 5b04 	ldr.w	r5, [r1], #4
 800313e:	d402      	bmi.n	8003146 <_printf_i+0x18a>
 8003140:	065f      	lsls	r7, r3, #25
 8003142:	bf48      	it	mi
 8003144:	b2ad      	uxthmi	r5, r5
 8003146:	6031      	str	r1, [r6, #0]
 8003148:	07d9      	lsls	r1, r3, #31
 800314a:	bf44      	itt	mi
 800314c:	f043 0320 	orrmi.w	r3, r3, #32
 8003150:	6023      	strmi	r3, [r4, #0]
 8003152:	b11d      	cbz	r5, 800315c <_printf_i+0x1a0>
 8003154:	2310      	movs	r3, #16
 8003156:	e7ab      	b.n	80030b0 <_printf_i+0xf4>
 8003158:	4826      	ldr	r0, [pc, #152]	@ (80031f4 <_printf_i+0x238>)
 800315a:	e7e9      	b.n	8003130 <_printf_i+0x174>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	f023 0320 	bic.w	r3, r3, #32
 8003162:	6023      	str	r3, [r4, #0]
 8003164:	e7f6      	b.n	8003154 <_printf_i+0x198>
 8003166:	4616      	mov	r6, r2
 8003168:	e7bd      	b.n	80030e6 <_printf_i+0x12a>
 800316a:	6833      	ldr	r3, [r6, #0]
 800316c:	6825      	ldr	r5, [r4, #0]
 800316e:	1d18      	adds	r0, r3, #4
 8003170:	6961      	ldr	r1, [r4, #20]
 8003172:	6030      	str	r0, [r6, #0]
 8003174:	062e      	lsls	r6, r5, #24
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	d501      	bpl.n	800317e <_printf_i+0x1c2>
 800317a:	6019      	str	r1, [r3, #0]
 800317c:	e002      	b.n	8003184 <_printf_i+0x1c8>
 800317e:	0668      	lsls	r0, r5, #25
 8003180:	d5fb      	bpl.n	800317a <_printf_i+0x1be>
 8003182:	8019      	strh	r1, [r3, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	4616      	mov	r6, r2
 8003188:	6123      	str	r3, [r4, #16]
 800318a:	e7bc      	b.n	8003106 <_printf_i+0x14a>
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	6032      	str	r2, [r6, #0]
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	4630      	mov	r0, r6
 800319a:	f000 f97b 	bl	8003494 <memchr>
 800319e:	b108      	cbz	r0, 80031a4 <_printf_i+0x1e8>
 80031a0:	1b80      	subs	r0, r0, r6
 80031a2:	6060      	str	r0, [r4, #4]
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	6123      	str	r3, [r4, #16]
 80031a8:	2300      	movs	r3, #0
 80031aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031ae:	e7aa      	b.n	8003106 <_printf_i+0x14a>
 80031b0:	4632      	mov	r2, r6
 80031b2:	4649      	mov	r1, r9
 80031b4:	4640      	mov	r0, r8
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	47d0      	blx	sl
 80031ba:	3001      	adds	r0, #1
 80031bc:	d0ad      	beq.n	800311a <_printf_i+0x15e>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	079b      	lsls	r3, r3, #30
 80031c2:	d413      	bmi.n	80031ec <_printf_i+0x230>
 80031c4:	68e0      	ldr	r0, [r4, #12]
 80031c6:	9b03      	ldr	r3, [sp, #12]
 80031c8:	4298      	cmp	r0, r3
 80031ca:	bfb8      	it	lt
 80031cc:	4618      	movlt	r0, r3
 80031ce:	e7a6      	b.n	800311e <_printf_i+0x162>
 80031d0:	2301      	movs	r3, #1
 80031d2:	4632      	mov	r2, r6
 80031d4:	4649      	mov	r1, r9
 80031d6:	4640      	mov	r0, r8
 80031d8:	47d0      	blx	sl
 80031da:	3001      	adds	r0, #1
 80031dc:	d09d      	beq.n	800311a <_printf_i+0x15e>
 80031de:	3501      	adds	r5, #1
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	9903      	ldr	r1, [sp, #12]
 80031e4:	1a5b      	subs	r3, r3, r1
 80031e6:	42ab      	cmp	r3, r5
 80031e8:	dcf2      	bgt.n	80031d0 <_printf_i+0x214>
 80031ea:	e7eb      	b.n	80031c4 <_printf_i+0x208>
 80031ec:	2500      	movs	r5, #0
 80031ee:	f104 0619 	add.w	r6, r4, #25
 80031f2:	e7f5      	b.n	80031e0 <_printf_i+0x224>
 80031f4:	08003617 	.word	0x08003617
 80031f8:	08003628 	.word	0x08003628

080031fc <__sflush_r>:
 80031fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	0716      	lsls	r6, r2, #28
 8003204:	4605      	mov	r5, r0
 8003206:	460c      	mov	r4, r1
 8003208:	d454      	bmi.n	80032b4 <__sflush_r+0xb8>
 800320a:	684b      	ldr	r3, [r1, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	dc02      	bgt.n	8003216 <__sflush_r+0x1a>
 8003210:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	dd48      	ble.n	80032a8 <__sflush_r+0xac>
 8003216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003218:	2e00      	cmp	r6, #0
 800321a:	d045      	beq.n	80032a8 <__sflush_r+0xac>
 800321c:	2300      	movs	r3, #0
 800321e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003222:	682f      	ldr	r7, [r5, #0]
 8003224:	6a21      	ldr	r1, [r4, #32]
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	d030      	beq.n	800328c <__sflush_r+0x90>
 800322a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	0759      	lsls	r1, r3, #29
 8003230:	d505      	bpl.n	800323e <__sflush_r+0x42>
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	1ad2      	subs	r2, r2, r3
 8003236:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003238:	b10b      	cbz	r3, 800323e <__sflush_r+0x42>
 800323a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	2300      	movs	r3, #0
 8003240:	4628      	mov	r0, r5
 8003242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003244:	6a21      	ldr	r1, [r4, #32]
 8003246:	47b0      	blx	r6
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	d106      	bne.n	800325c <__sflush_r+0x60>
 800324e:	6829      	ldr	r1, [r5, #0]
 8003250:	291d      	cmp	r1, #29
 8003252:	d82b      	bhi.n	80032ac <__sflush_r+0xb0>
 8003254:	4a28      	ldr	r2, [pc, #160]	@ (80032f8 <__sflush_r+0xfc>)
 8003256:	410a      	asrs	r2, r1
 8003258:	07d6      	lsls	r6, r2, #31
 800325a:	d427      	bmi.n	80032ac <__sflush_r+0xb0>
 800325c:	2200      	movs	r2, #0
 800325e:	6062      	str	r2, [r4, #4]
 8003260:	6922      	ldr	r2, [r4, #16]
 8003262:	04d9      	lsls	r1, r3, #19
 8003264:	6022      	str	r2, [r4, #0]
 8003266:	d504      	bpl.n	8003272 <__sflush_r+0x76>
 8003268:	1c42      	adds	r2, r0, #1
 800326a:	d101      	bne.n	8003270 <__sflush_r+0x74>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	b903      	cbnz	r3, 8003272 <__sflush_r+0x76>
 8003270:	6560      	str	r0, [r4, #84]	@ 0x54
 8003272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003274:	602f      	str	r7, [r5, #0]
 8003276:	b1b9      	cbz	r1, 80032a8 <__sflush_r+0xac>
 8003278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800327c:	4299      	cmp	r1, r3
 800327e:	d002      	beq.n	8003286 <__sflush_r+0x8a>
 8003280:	4628      	mov	r0, r5
 8003282:	f7ff fbf3 	bl	8002a6c <_free_r>
 8003286:	2300      	movs	r3, #0
 8003288:	6363      	str	r3, [r4, #52]	@ 0x34
 800328a:	e00d      	b.n	80032a8 <__sflush_r+0xac>
 800328c:	2301      	movs	r3, #1
 800328e:	4628      	mov	r0, r5
 8003290:	47b0      	blx	r6
 8003292:	4602      	mov	r2, r0
 8003294:	1c50      	adds	r0, r2, #1
 8003296:	d1c9      	bne.n	800322c <__sflush_r+0x30>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0c6      	beq.n	800322c <__sflush_r+0x30>
 800329e:	2b1d      	cmp	r3, #29
 80032a0:	d001      	beq.n	80032a6 <__sflush_r+0xaa>
 80032a2:	2b16      	cmp	r3, #22
 80032a4:	d11d      	bne.n	80032e2 <__sflush_r+0xe6>
 80032a6:	602f      	str	r7, [r5, #0]
 80032a8:	2000      	movs	r0, #0
 80032aa:	e021      	b.n	80032f0 <__sflush_r+0xf4>
 80032ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	e01a      	b.n	80032ea <__sflush_r+0xee>
 80032b4:	690f      	ldr	r7, [r1, #16]
 80032b6:	2f00      	cmp	r7, #0
 80032b8:	d0f6      	beq.n	80032a8 <__sflush_r+0xac>
 80032ba:	0793      	lsls	r3, r2, #30
 80032bc:	bf18      	it	ne
 80032be:	2300      	movne	r3, #0
 80032c0:	680e      	ldr	r6, [r1, #0]
 80032c2:	bf08      	it	eq
 80032c4:	694b      	ldreq	r3, [r1, #20]
 80032c6:	1bf6      	subs	r6, r6, r7
 80032c8:	600f      	str	r7, [r1, #0]
 80032ca:	608b      	str	r3, [r1, #8]
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	ddeb      	ble.n	80032a8 <__sflush_r+0xac>
 80032d0:	4633      	mov	r3, r6
 80032d2:	463a      	mov	r2, r7
 80032d4:	4628      	mov	r0, r5
 80032d6:	6a21      	ldr	r1, [r4, #32]
 80032d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80032dc:	47e0      	blx	ip
 80032de:	2800      	cmp	r0, #0
 80032e0:	dc07      	bgt.n	80032f2 <__sflush_r+0xf6>
 80032e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f2:	4407      	add	r7, r0
 80032f4:	1a36      	subs	r6, r6, r0
 80032f6:	e7e9      	b.n	80032cc <__sflush_r+0xd0>
 80032f8:	dfbffffe 	.word	0xdfbffffe

080032fc <_fflush_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	690b      	ldr	r3, [r1, #16]
 8003300:	4605      	mov	r5, r0
 8003302:	460c      	mov	r4, r1
 8003304:	b913      	cbnz	r3, 800330c <_fflush_r+0x10>
 8003306:	2500      	movs	r5, #0
 8003308:	4628      	mov	r0, r5
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	b118      	cbz	r0, 8003316 <_fflush_r+0x1a>
 800330e:	6a03      	ldr	r3, [r0, #32]
 8003310:	b90b      	cbnz	r3, 8003316 <_fflush_r+0x1a>
 8003312:	f7ff faa3 	bl	800285c <__sinit>
 8003316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f3      	beq.n	8003306 <_fflush_r+0xa>
 800331e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003320:	07d0      	lsls	r0, r2, #31
 8003322:	d404      	bmi.n	800332e <_fflush_r+0x32>
 8003324:	0599      	lsls	r1, r3, #22
 8003326:	d402      	bmi.n	800332e <_fflush_r+0x32>
 8003328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800332a:	f7ff fb9c 	bl	8002a66 <__retarget_lock_acquire_recursive>
 800332e:	4628      	mov	r0, r5
 8003330:	4621      	mov	r1, r4
 8003332:	f7ff ff63 	bl	80031fc <__sflush_r>
 8003336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003338:	4605      	mov	r5, r0
 800333a:	07da      	lsls	r2, r3, #31
 800333c:	d4e4      	bmi.n	8003308 <_fflush_r+0xc>
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	059b      	lsls	r3, r3, #22
 8003342:	d4e1      	bmi.n	8003308 <_fflush_r+0xc>
 8003344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003346:	f7ff fb8f 	bl	8002a68 <__retarget_lock_release_recursive>
 800334a:	e7dd      	b.n	8003308 <_fflush_r+0xc>

0800334c <__swbuf_r>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	460e      	mov	r6, r1
 8003350:	4614      	mov	r4, r2
 8003352:	4605      	mov	r5, r0
 8003354:	b118      	cbz	r0, 800335e <__swbuf_r+0x12>
 8003356:	6a03      	ldr	r3, [r0, #32]
 8003358:	b90b      	cbnz	r3, 800335e <__swbuf_r+0x12>
 800335a:	f7ff fa7f 	bl	800285c <__sinit>
 800335e:	69a3      	ldr	r3, [r4, #24]
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	071a      	lsls	r2, r3, #28
 8003366:	d501      	bpl.n	800336c <__swbuf_r+0x20>
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	b943      	cbnz	r3, 800337e <__swbuf_r+0x32>
 800336c:	4621      	mov	r1, r4
 800336e:	4628      	mov	r0, r5
 8003370:	f000 f82a 	bl	80033c8 <__swsetup_r>
 8003374:	b118      	cbz	r0, 800337e <__swbuf_r+0x32>
 8003376:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800337a:	4638      	mov	r0, r7
 800337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	6922      	ldr	r2, [r4, #16]
 8003382:	b2f6      	uxtb	r6, r6
 8003384:	1a98      	subs	r0, r3, r2
 8003386:	6963      	ldr	r3, [r4, #20]
 8003388:	4637      	mov	r7, r6
 800338a:	4283      	cmp	r3, r0
 800338c:	dc05      	bgt.n	800339a <__swbuf_r+0x4e>
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f7ff ffb3 	bl	80032fc <_fflush_r>
 8003396:	2800      	cmp	r0, #0
 8003398:	d1ed      	bne.n	8003376 <__swbuf_r+0x2a>
 800339a:	68a3      	ldr	r3, [r4, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60a3      	str	r3, [r4, #8]
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	6022      	str	r2, [r4, #0]
 80033a6:	701e      	strb	r6, [r3, #0]
 80033a8:	6962      	ldr	r2, [r4, #20]
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d004      	beq.n	80033ba <__swbuf_r+0x6e>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	07db      	lsls	r3, r3, #31
 80033b4:	d5e1      	bpl.n	800337a <__swbuf_r+0x2e>
 80033b6:	2e0a      	cmp	r6, #10
 80033b8:	d1df      	bne.n	800337a <__swbuf_r+0x2e>
 80033ba:	4621      	mov	r1, r4
 80033bc:	4628      	mov	r0, r5
 80033be:	f7ff ff9d 	bl	80032fc <_fflush_r>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d0d9      	beq.n	800337a <__swbuf_r+0x2e>
 80033c6:	e7d6      	b.n	8003376 <__swbuf_r+0x2a>

080033c8 <__swsetup_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4b29      	ldr	r3, [pc, #164]	@ (8003470 <__swsetup_r+0xa8>)
 80033cc:	4605      	mov	r5, r0
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	460c      	mov	r4, r1
 80033d2:	b118      	cbz	r0, 80033dc <__swsetup_r+0x14>
 80033d4:	6a03      	ldr	r3, [r0, #32]
 80033d6:	b90b      	cbnz	r3, 80033dc <__swsetup_r+0x14>
 80033d8:	f7ff fa40 	bl	800285c <__sinit>
 80033dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033e0:	0719      	lsls	r1, r3, #28
 80033e2:	d422      	bmi.n	800342a <__swsetup_r+0x62>
 80033e4:	06da      	lsls	r2, r3, #27
 80033e6:	d407      	bmi.n	80033f8 <__swsetup_r+0x30>
 80033e8:	2209      	movs	r2, #9
 80033ea:	602a      	str	r2, [r5, #0]
 80033ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	e033      	b.n	8003460 <__swsetup_r+0x98>
 80033f8:	0758      	lsls	r0, r3, #29
 80033fa:	d512      	bpl.n	8003422 <__swsetup_r+0x5a>
 80033fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033fe:	b141      	cbz	r1, 8003412 <__swsetup_r+0x4a>
 8003400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003404:	4299      	cmp	r1, r3
 8003406:	d002      	beq.n	800340e <__swsetup_r+0x46>
 8003408:	4628      	mov	r0, r5
 800340a:	f7ff fb2f 	bl	8002a6c <_free_r>
 800340e:	2300      	movs	r3, #0
 8003410:	6363      	str	r3, [r4, #52]	@ 0x34
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	2300      	movs	r3, #0
 800341c:	6063      	str	r3, [r4, #4]
 800341e:	6923      	ldr	r3, [r4, #16]
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	b94b      	cbnz	r3, 8003442 <__swsetup_r+0x7a>
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003438:	d003      	beq.n	8003442 <__swsetup_r+0x7a>
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f85c 	bl	80034fa <__smakebuf_r>
 8003442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003446:	f013 0201 	ands.w	r2, r3, #1
 800344a:	d00a      	beq.n	8003462 <__swsetup_r+0x9a>
 800344c:	2200      	movs	r2, #0
 800344e:	60a2      	str	r2, [r4, #8]
 8003450:	6962      	ldr	r2, [r4, #20]
 8003452:	4252      	negs	r2, r2
 8003454:	61a2      	str	r2, [r4, #24]
 8003456:	6922      	ldr	r2, [r4, #16]
 8003458:	b942      	cbnz	r2, 800346c <__swsetup_r+0xa4>
 800345a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800345e:	d1c5      	bne.n	80033ec <__swsetup_r+0x24>
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	0799      	lsls	r1, r3, #30
 8003464:	bf58      	it	pl
 8003466:	6962      	ldrpl	r2, [r4, #20]
 8003468:	60a2      	str	r2, [r4, #8]
 800346a:	e7f4      	b.n	8003456 <__swsetup_r+0x8e>
 800346c:	2000      	movs	r0, #0
 800346e:	e7f7      	b.n	8003460 <__swsetup_r+0x98>
 8003470:	20000018 	.word	0x20000018

08003474 <_sbrk_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	2300      	movs	r3, #0
 8003478:	4d05      	ldr	r5, [pc, #20]	@ (8003490 <_sbrk_r+0x1c>)
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd fab8 	bl	80009f4 <_sbrk>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_sbrk_r+0x1a>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_sbrk_r+0x1a>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	20000234 	.word	0x20000234

08003494 <memchr>:
 8003494:	4603      	mov	r3, r0
 8003496:	b510      	push	{r4, lr}
 8003498:	b2c9      	uxtb	r1, r1
 800349a:	4402      	add	r2, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	d101      	bne.n	80034a6 <memchr+0x12>
 80034a2:	2000      	movs	r0, #0
 80034a4:	e003      	b.n	80034ae <memchr+0x1a>
 80034a6:	7804      	ldrb	r4, [r0, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	428c      	cmp	r4, r1
 80034ac:	d1f6      	bne.n	800349c <memchr+0x8>
 80034ae:	bd10      	pop	{r4, pc}

080034b0 <__swhatbuf_r>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	460c      	mov	r4, r1
 80034b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b8:	4615      	mov	r5, r2
 80034ba:	2900      	cmp	r1, #0
 80034bc:	461e      	mov	r6, r3
 80034be:	b096      	sub	sp, #88	@ 0x58
 80034c0:	da0c      	bge.n	80034dc <__swhatbuf_r+0x2c>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	2100      	movs	r1, #0
 80034c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034ca:	bf14      	ite	ne
 80034cc:	2340      	movne	r3, #64	@ 0x40
 80034ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034d2:	2000      	movs	r0, #0
 80034d4:	6031      	str	r1, [r6, #0]
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	b016      	add	sp, #88	@ 0x58
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	466a      	mov	r2, sp
 80034de:	f000 f849 	bl	8003574 <_fstat_r>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	dbed      	blt.n	80034c2 <__swhatbuf_r+0x12>
 80034e6:	9901      	ldr	r1, [sp, #4]
 80034e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80034ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80034f0:	4259      	negs	r1, r3
 80034f2:	4159      	adcs	r1, r3
 80034f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034f8:	e7eb      	b.n	80034d2 <__swhatbuf_r+0x22>

080034fa <__smakebuf_r>:
 80034fa:	898b      	ldrh	r3, [r1, #12]
 80034fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034fe:	079d      	lsls	r5, r3, #30
 8003500:	4606      	mov	r6, r0
 8003502:	460c      	mov	r4, r1
 8003504:	d507      	bpl.n	8003516 <__smakebuf_r+0x1c>
 8003506:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	2301      	movs	r3, #1
 8003510:	6163      	str	r3, [r4, #20]
 8003512:	b003      	add	sp, #12
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003516:	466a      	mov	r2, sp
 8003518:	ab01      	add	r3, sp, #4
 800351a:	f7ff ffc9 	bl	80034b0 <__swhatbuf_r>
 800351e:	9f00      	ldr	r7, [sp, #0]
 8003520:	4605      	mov	r5, r0
 8003522:	4639      	mov	r1, r7
 8003524:	4630      	mov	r0, r6
 8003526:	f7ff fb0b 	bl	8002b40 <_malloc_r>
 800352a:	b948      	cbnz	r0, 8003540 <__smakebuf_r+0x46>
 800352c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003530:	059a      	lsls	r2, r3, #22
 8003532:	d4ee      	bmi.n	8003512 <__smakebuf_r+0x18>
 8003534:	f023 0303 	bic.w	r3, r3, #3
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	e7e2      	b.n	8003506 <__smakebuf_r+0xc>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	9b01      	ldr	r3, [sp, #4]
 800354e:	6020      	str	r0, [r4, #0]
 8003550:	b15b      	cbz	r3, 800356a <__smakebuf_r+0x70>
 8003552:	4630      	mov	r0, r6
 8003554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003558:	f000 f81e 	bl	8003598 <_isatty_r>
 800355c:	b128      	cbz	r0, 800356a <__smakebuf_r+0x70>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	81a3      	strh	r3, [r4, #12]
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	431d      	orrs	r5, r3
 800356e:	81a5      	strh	r5, [r4, #12]
 8003570:	e7cf      	b.n	8003512 <__smakebuf_r+0x18>
	...

08003574 <_fstat_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	2300      	movs	r3, #0
 8003578:	4d06      	ldr	r5, [pc, #24]	@ (8003594 <_fstat_r+0x20>)
 800357a:	4604      	mov	r4, r0
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	602b      	str	r3, [r5, #0]
 8003582:	f7fd fa11 	bl	80009a8 <_fstat>
 8003586:	1c43      	adds	r3, r0, #1
 8003588:	d102      	bne.n	8003590 <_fstat_r+0x1c>
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	b103      	cbz	r3, 8003590 <_fstat_r+0x1c>
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	bd38      	pop	{r3, r4, r5, pc}
 8003592:	bf00      	nop
 8003594:	20000234 	.word	0x20000234

08003598 <_isatty_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	2300      	movs	r3, #0
 800359c:	4d05      	ldr	r5, [pc, #20]	@ (80035b4 <_isatty_r+0x1c>)
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fd fa0f 	bl	80009c6 <_isatty>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_isatty_r+0x1a>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_isatty_r+0x1a>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000234 	.word	0x20000234

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
