
test_sensor_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002638  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002744  08002744  00003744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002768  08002768  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002768  08002768  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002768  08002768  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002770  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  0800277c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800277c  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086e6  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179c  00000000  00000000  0000c71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  0000e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167ad  00000000  00000000  0000ef52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ab7  00000000  00000000  000256ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084207  00000000  00000000  0002f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b33bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002644  00000000  00000000  000b3400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b5a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800272c 	.word	0x0800272c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800272c 	.word	0x0800272c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc7a 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f84a 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f918 	bl	800038c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f88c 	bl	8000278 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Sensor 1 Config */
  sr04_1.trig_port = GPIOA;
 8000160:	4b1d      	ldr	r3, [pc, #116]	@ (80001d8 <main+0x8c>)
 8000162:	4a1e      	ldr	r2, [pc, #120]	@ (80001dc <main+0x90>)
 8000164:	601a      	str	r2, [r3, #0]
  sr04_1.trig_pin = GPIO_PIN_3;
 8000166:	4b1c      	ldr	r3, [pc, #112]	@ (80001d8 <main+0x8c>)
 8000168:	2208      	movs	r2, #8
 800016a:	809a      	strh	r2, [r3, #4]
  sr04_1.echo_htim = &htim1;
 800016c:	4b1a      	ldr	r3, [pc, #104]	@ (80001d8 <main+0x8c>)
 800016e:	4a1c      	ldr	r2, [pc, #112]	@ (80001e0 <main+0x94>)
 8000170:	609a      	str	r2, [r3, #8]
  sr04_1.echo_channel = TIM_CHANNEL_1;
 8000172:	4b19      	ldr	r3, [pc, #100]	@ (80001d8 <main+0x8c>)
 8000174:	2200      	movs	r2, #0
 8000176:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04_1);
 8000178:	4817      	ldr	r0, [pc, #92]	@ (80001d8 <main+0x8c>)
 800017a:	f000 f94b 	bl	8000414 <sr04_init>

  /* Sensor 2 Config */
  sr04_2.trig_port = GPIOA;
 800017e:	4b19      	ldr	r3, [pc, #100]	@ (80001e4 <main+0x98>)
 8000180:	4a16      	ldr	r2, [pc, #88]	@ (80001dc <main+0x90>)
 8000182:	601a      	str	r2, [r3, #0]
  sr04_2.trig_pin = GPIO_PIN_4;
 8000184:	4b17      	ldr	r3, [pc, #92]	@ (80001e4 <main+0x98>)
 8000186:	2210      	movs	r2, #16
 8000188:	809a      	strh	r2, [r3, #4]
  sr04_2.echo_htim = &htim1;
 800018a:	4b16      	ldr	r3, [pc, #88]	@ (80001e4 <main+0x98>)
 800018c:	4a14      	ldr	r2, [pc, #80]	@ (80001e0 <main+0x94>)
 800018e:	609a      	str	r2, [r3, #8]
  sr04_2.echo_channel = TIM_CHANNEL_2;
 8000190:	4b14      	ldr	r3, [pc, #80]	@ (80001e4 <main+0x98>)
 8000192:	2204      	movs	r2, #4
 8000194:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04_2);
 8000196:	4813      	ldr	r0, [pc, #76]	@ (80001e4 <main+0x98>)
 8000198:	f000 f93c 	bl	8000414 <sr04_init>

  /* Sensor 3 Config */
  sr04_3.trig_port = GPIOA;
 800019c:	4b12      	ldr	r3, [pc, #72]	@ (80001e8 <main+0x9c>)
 800019e:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <main+0x90>)
 80001a0:	601a      	str	r2, [r3, #0]
  sr04_3.trig_pin = GPIO_PIN_5;
 80001a2:	4b11      	ldr	r3, [pc, #68]	@ (80001e8 <main+0x9c>)
 80001a4:	2220      	movs	r2, #32
 80001a6:	809a      	strh	r2, [r3, #4]
  sr04_3.echo_htim = &htim1;
 80001a8:	4b0f      	ldr	r3, [pc, #60]	@ (80001e8 <main+0x9c>)
 80001aa:	4a0d      	ldr	r2, [pc, #52]	@ (80001e0 <main+0x94>)
 80001ac:	609a      	str	r2, [r3, #8]
  sr04_3.echo_channel = TIM_CHANNEL_3;
 80001ae:	4b0e      	ldr	r3, [pc, #56]	@ (80001e8 <main+0x9c>)
 80001b0:	2208      	movs	r2, #8
 80001b2:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04_3);
 80001b4:	480c      	ldr	r0, [pc, #48]	@ (80001e8 <main+0x9c>)
 80001b6:	f000 f92d 	bl	8000414 <sr04_init>
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sr04_trigger(&sr04_1);
 80001ba:	4807      	ldr	r0, [pc, #28]	@ (80001d8 <main+0x8c>)
 80001bc:	f000 f9b0 	bl	8000520 <sr04_trigger>
	  sr04_trigger(&sr04_2);
 80001c0:	4808      	ldr	r0, [pc, #32]	@ (80001e4 <main+0x98>)
 80001c2:	f000 f9ad 	bl	8000520 <sr04_trigger>
	  sr04_trigger(&sr04_3);
 80001c6:	4808      	ldr	r0, [pc, #32]	@ (80001e8 <main+0x9c>)
 80001c8:	f000 f9aa 	bl	8000520 <sr04_trigger>
	  HAL_Delay(100);
 80001cc:	2064      	movs	r0, #100	@ 0x64
 80001ce:	f000 fc9d 	bl	8000b0c <HAL_Delay>
	  sr04_trigger(&sr04_1);
 80001d2:	bf00      	nop
 80001d4:	e7f1      	b.n	80001ba <main+0x6e>
 80001d6:	bf00      	nop
 80001d8:	20000070 	.word	0x20000070
 80001dc:	40010800 	.word	0x40010800
 80001e0:	20000028 	.word	0x20000028
 80001e4:	20000094 	.word	0x20000094
 80001e8:	200000b8 	.word	0x200000b8

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	@ 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fa6a 	bl	80026d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 ff37 	bl	80010a8 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f8e2 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f9a4 	bl	80015ac <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f8cd 	bl	8000408 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	@ 0x28
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000296:	463b      	mov	r3, r7
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002a2:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002a4:	4a38      	ldr	r2, [pc, #224]	@ (8000388 <MX_TIM1_Init+0x110>)
 80002a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80002a8:	4b36      	ldr	r3, [pc, #216]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002aa:	2247      	movs	r2, #71	@ 0x47
 80002ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b35      	ldr	r3, [pc, #212]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80002b4:	4b33      	ldr	r3, [pc, #204]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80002ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002bc:	4b31      	ldr	r3, [pc, #196]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c2:	4b30      	ldr	r3, [pc, #192]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002ce:	482d      	ldr	r0, [pc, #180]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002d0:	f001 fac8 	bl	8001864 <HAL_TIM_Base_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80002da:	f000 f895 	bl	8000408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4619      	mov	r1, r3
 80002ea:	4826      	ldr	r0, [pc, #152]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002ec:	f001 fe64 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002f6:	f000 f887 	bl	8000408 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80002fa:	4822      	ldr	r0, [pc, #136]	@ (8000384 <MX_TIM1_Init+0x10c>)
 80002fc:	f001 fb54 	bl	80019a8 <HAL_TIM_IC_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000306:	f000 f87f 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	4619      	mov	r1, r3
 8000318:	481a      	ldr	r0, [pc, #104]	@ (8000384 <MX_TIM1_Init+0x10c>)
 800031a:	f002 f96b 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000324:	f000 f870 	bl	8000408 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000328:	2300      	movs	r3, #0
 800032a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800032c:	2301      	movs	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000338:	463b      	mov	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	@ (8000384 <MX_TIM1_Init+0x10c>)
 8000340:	f001 fd9e 	bl	8001e80 <HAL_TIM_IC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800034a:	f000 f85d 	bl	8000408 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	2204      	movs	r2, #4
 8000352:	4619      	mov	r1, r3
 8000354:	480b      	ldr	r0, [pc, #44]	@ (8000384 <MX_TIM1_Init+0x10c>)
 8000356:	f001 fd93 	bl	8001e80 <HAL_TIM_IC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000360:	f000 f852 	bl	8000408 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000364:	463b      	mov	r3, r7
 8000366:	2208      	movs	r2, #8
 8000368:	4619      	mov	r1, r3
 800036a:	4806      	ldr	r0, [pc, #24]	@ (8000384 <MX_TIM1_Init+0x10c>)
 800036c:	f001 fd88 	bl	8001e80 <HAL_TIM_IC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000376:	f000 f847 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	@ 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	40012c00 	.word	0x40012c00

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a10      	ldr	r2, [pc, #64]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_GPIO_Init+0x74>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2138      	movs	r1, #56	@ 0x38
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <MX_GPIO_Init+0x78>)
 80003d6:	f000 fe4f 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80003da:	2338      	movs	r3, #56	@ 0x38
 80003dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_GPIO_Init+0x78>)
 80003f2:	f000 fcbd 	bl	8000d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <sr04_init>:
 */

#include "sensor.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	889b      	ldrh	r3, [r3, #4]
 8000424:	2200      	movs	r2, #0
 8000426:	4619      	mov	r1, r3
 8000428:	f000 fe26 	bl	8001078 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	899b      	ldrh	r3, [r3, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d10a      	bne.n	800044a <sr04_init+0x36>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6a1a      	ldr	r2, [r3, #32]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f022 020a 	bic.w	r2, r2, #10
 8000446:	621a      	str	r2, [r3, #32]
 8000448:	e027      	b.n	800049a <sr04_init+0x86>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	899b      	ldrh	r3, [r3, #12]
 800044e:	2b04      	cmp	r3, #4
 8000450:	d10a      	bne.n	8000468 <sr04_init+0x54>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6a1b      	ldr	r3, [r3, #32]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	6892      	ldr	r2, [r2, #8]
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000464:	6213      	str	r3, [r2, #32]
 8000466:	e018      	b.n	800049a <sr04_init+0x86>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	899b      	ldrh	r3, [r3, #12]
 800046c:	2b08      	cmp	r3, #8
 800046e:	d10a      	bne.n	8000486 <sr04_init+0x72>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	6892      	ldr	r2, [r2, #8]
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000482:	6213      	str	r3, [r2, #32]
 8000484:	e009      	b.n	800049a <sr04_init+0x86>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6a1b      	ldr	r3, [r3, #32]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	6892      	ldr	r2, [r2, #8]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000498:	6213      	str	r3, [r2, #32]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	899b      	ldrh	r3, [r3, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d108      	bne.n	80004b4 <sr04_init+0xa0>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6a12      	ldr	r2, [r2, #32]
 80004b0:	621a      	str	r2, [r3, #32]
 80004b2:	e021      	b.n	80004f8 <sr04_init+0xe4>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	899b      	ldrh	r3, [r3, #12]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d108      	bne.n	80004ce <sr04_init+0xba>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	6892      	ldr	r2, [r2, #8]
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	6a1b      	ldr	r3, [r3, #32]
 80004ca:	6213      	str	r3, [r2, #32]
 80004cc:	e014      	b.n	80004f8 <sr04_init+0xe4>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	899b      	ldrh	r3, [r3, #12]
 80004d2:	2b08      	cmp	r3, #8
 80004d4:	d108      	bne.n	80004e8 <sr04_init+0xd4>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	6892      	ldr	r2, [r2, #8]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	6213      	str	r3, [r2, #32]
 80004e6:	e007      	b.n	80004f8 <sr04_init+0xe4>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	6892      	ldr	r2, [r2, #8]
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	6a1b      	ldr	r3, [r3, #32]
 80004f6:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	899b      	ldrh	r3, [r3, #12]
 8000506:	4619      	mov	r1, r3
 8000508:	4610      	mov	r0, r2
 800050a:	f001 faa5 	bl	8001a58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	4618      	mov	r0, r3
 8000514:	f001 f9f6 	bl	8001904 <HAL_TIM_Base_Start_IT>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	889b      	ldrh	r3, [r3, #4]
 8000530:	2201      	movs	r2, #1
 8000532:	4619      	mov	r1, r3
 8000534:	f000 fda0 	bl	8001078 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fae7 	bl	8000b0c <HAL_Delay>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	889b      	ldrh	r3, [r3, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	f000 fd95 	bl	8001078 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <sr04_read_distance>:

void sr04_read_distance(sr04_t *sr04_struct){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7b9b      	ldrb	r3, [r3, #14]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <sr04_read_distance+0x16>
 8000568:	2b01      	cmp	r3, #1
 800056a:	d07b      	beq.n	8000664 <sr04_read_distance+0x10c>
      }
      sr04_struct->last_distance = sr04_struct->distance;
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      break;
  }
}
 800056c:	e11e      	b.n	80007ac <sr04_read_distance+0x254>
      sr04_struct->start_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2201      	movs	r2, #1
 800057e:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	899b      	ldrh	r3, [r3, #12]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10a      	bne.n	80005a4 <sr04_read_distance+0x4c>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f022 020a 	bic.w	r2, r2, #10
 80005a0:	621a      	str	r2, [r3, #32]
 80005a2:	e027      	b.n	80005f4 <sr04_read_distance+0x9c>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	899b      	ldrh	r3, [r3, #12]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d10a      	bne.n	80005c2 <sr04_read_distance+0x6a>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	6892      	ldr	r2, [r2, #8]
 80005b8:	6812      	ldr	r2, [r2, #0]
 80005ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80005be:	6213      	str	r3, [r2, #32]
 80005c0:	e018      	b.n	80005f4 <sr04_read_distance+0x9c>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	899b      	ldrh	r3, [r3, #12]
 80005c6:	2b08      	cmp	r3, #8
 80005c8:	d10a      	bne.n	80005e0 <sr04_read_distance+0x88>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6892      	ldr	r2, [r2, #8]
 80005d6:	6812      	ldr	r2, [r2, #0]
 80005d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80005dc:	6213      	str	r3, [r2, #32]
 80005de:	e009      	b.n	80005f4 <sr04_read_distance+0x9c>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	6892      	ldr	r2, [r2, #8]
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80005f2:	6213      	str	r3, [r2, #32]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	899b      	ldrh	r3, [r3, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10a      	bne.n	8000612 <sr04_read_distance+0xba>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6a1a      	ldr	r2, [r3, #32]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f042 0202 	orr.w	r2, r2, #2
 800060e:	621a      	str	r2, [r3, #32]
      break;
 8000610:	e0cc      	b.n	80007ac <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	899b      	ldrh	r3, [r3, #12]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d10a      	bne.n	8000630 <sr04_read_distance+0xd8>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a1b      	ldr	r3, [r3, #32]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	6892      	ldr	r2, [r2, #8]
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6213      	str	r3, [r2, #32]
      break;
 800062e:	e0bd      	b.n	80007ac <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	899b      	ldrh	r3, [r3, #12]
 8000634:	2b08      	cmp	r3, #8
 8000636:	d10a      	bne.n	800064e <sr04_read_distance+0xf6>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	6892      	ldr	r2, [r2, #8]
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800064a:	6213      	str	r3, [r2, #32]
      break;
 800064c:	e0ae      	b.n	80007ac <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	6892      	ldr	r2, [r2, #8]
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000660:	6213      	str	r3, [r2, #32]
      break;
 8000662:	e0a3      	b.n	80007ac <sr04_read_distance+0x254>
      sr04_struct->end_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim) + sr04_struct->tim_update_count * sr04_struct->echo_htim->Init.Period;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	8c1b      	ldrh	r3, [r3, #32]
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	fb01 f303 	mul.w	r3, r1, r3
 800067c:	441a      	add	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	739a      	strb	r2, [r3, #14]
      sr04_struct->distance = (sr04_struct->end_counter - sr04_struct->start_counter) * 340 / (SystemCoreClock / 1000000) / 2 / (1000 / sr04_struct->echo_htim->Init.Prescaler);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000696:	fb03 f202 	mul.w	r2, r3, r2
 800069a:	4b47      	ldr	r3, [pc, #284]	@ (80007b8 <sr04_read_distance+0x260>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4947      	ldr	r1, [pc, #284]	@ (80007bc <sr04_read_distance+0x264>)
 80006a0:	fba1 1303 	umull	r1, r3, r1, r3
 80006a4:	0c9b      	lsrs	r3, r3, #18
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	085a      	lsrs	r2, r3, #1
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80006ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d903      	bls.n	80006d6 <sr04_read_distance+0x17e>
        sr04_struct->distance = sr04_struct->last_distance;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	69da      	ldr	r2, [r3, #28]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	699a      	ldr	r2, [r3, #24]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	899b      	ldrh	r3, [r3, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10a      	bne.n	80006fc <sr04_read_distance+0x1a4>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6a1a      	ldr	r2, [r3, #32]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f022 020a 	bic.w	r2, r2, #10
 80006f8:	621a      	str	r2, [r3, #32]
 80006fa:	e027      	b.n	800074c <sr04_read_distance+0x1f4>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	899b      	ldrh	r3, [r3, #12]
 8000700:	2b04      	cmp	r3, #4
 8000702:	d10a      	bne.n	800071a <sr04_read_distance+0x1c2>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	6892      	ldr	r2, [r2, #8]
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000716:	6213      	str	r3, [r2, #32]
 8000718:	e018      	b.n	800074c <sr04_read_distance+0x1f4>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	899b      	ldrh	r3, [r3, #12]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d10a      	bne.n	8000738 <sr04_read_distance+0x1e0>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	6892      	ldr	r2, [r2, #8]
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000734:	6213      	str	r3, [r2, #32]
 8000736:	e009      	b.n	800074c <sr04_read_distance+0x1f4>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	6892      	ldr	r2, [r2, #8]
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800074a:	6213      	str	r3, [r2, #32]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	899b      	ldrh	r3, [r3, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d108      	bne.n	8000766 <sr04_read_distance+0x20e>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6a12      	ldr	r2, [r2, #32]
 8000762:	621a      	str	r2, [r3, #32]
      break;
 8000764:	e021      	b.n	80007aa <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d108      	bne.n	8000780 <sr04_read_distance+0x228>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	6892      	ldr	r2, [r2, #8]
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	6213      	str	r3, [r2, #32]
      break;
 800077e:	e014      	b.n	80007aa <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2b08      	cmp	r3, #8
 8000786:	d108      	bne.n	800079a <sr04_read_distance+0x242>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	6892      	ldr	r2, [r2, #8]
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	6213      	str	r3, [r2, #32]
      break;
 8000798:	e007      	b.n	80007aa <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6892      	ldr	r2, [r2, #8]
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	6a1b      	ldr	r3, [r3, #32]
 80007a8:	6213      	str	r3, [r2, #32]
      break;
 80007aa:	bf00      	nop
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	431bde83 	.word	0x431bde83

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1a      	ldr	r2, [pc, #104]	@ (80008a8 <HAL_TIM_Base_MspInit+0x84>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d12c      	bne.n	800089e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 800084a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_TIM_Base_MspInit+0x88>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000874:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 800088a:	f000 fa71 	bl	8000d70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	201b      	movs	r0, #27
 8000894:	f000 fa35 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000898:	201b      	movs	r0, #27
 800089a:	f000 fa4e 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8e6 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	// Capture interrupt handling
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b02      	cmp	r3, #2
 800091c:	d109      	bne.n	8000932 <TIM1_CC_IRQHandler+0x26>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	2b02      	cmp	r3, #2
 800092a:	d102      	bne.n	8000932 <TIM1_CC_IRQHandler+0x26>
		{
			sr04_read_distance(&sr04_1);
 800092c:	4815      	ldr	r0, [pc, #84]	@ (8000984 <TIM1_CC_IRQHandler+0x78>)
 800092e:	f7ff fe13 	bl	8000558 <sr04_read_distance>
		}
	}
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC2) != RESET)
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	2b04      	cmp	r3, #4
 800093e:	d109      	bne.n	8000954 <TIM1_CC_IRQHandler+0x48>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC2) != RESET)
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	2b04      	cmp	r3, #4
 800094c:	d102      	bne.n	8000954 <TIM1_CC_IRQHandler+0x48>
		{
			sr04_read_distance(&sr04_2);
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <TIM1_CC_IRQHandler+0x7c>)
 8000950:	f7ff fe02 	bl	8000558 <sr04_read_distance>
		}
	}
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC3) != RESET)
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b08      	cmp	r3, #8
 8000960:	d109      	bne.n	8000976 <TIM1_CC_IRQHandler+0x6a>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC3) != RESET)
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	2b08      	cmp	r3, #8
 800096e:	d102      	bne.n	8000976 <TIM1_CC_IRQHandler+0x6a>
		{
			sr04_read_distance(&sr04_3);
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <TIM1_CC_IRQHandler+0x80>)
 8000972:	f7ff fdf1 	bl	8000558 <sr04_read_distance>
		}
	}
	/* USER CODE END TIM1_CC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8000976:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM1_CC_IRQHandler+0x74>)
 8000978:	f001 f97a 	bl	8001c70 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_CC_IRQn 1 */

	/* USER CODE END TIM1_CC_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000028 	.word	0x20000028
 8000984:	20000070 	.word	0x20000070
 8000988:	20000094 	.word	0x20000094
 800098c:	200000b8 	.word	0x200000b8

08000990 <TIM1_UP_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	// Update interrupt handling
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <TIM1_UP_IRQHandler+0x50>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d118      	bne.n	80009d4 <TIM1_UP_IRQHandler+0x44>
	{
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_UPDATE) != RESET)
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <TIM1_UP_IRQHandler+0x50>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d111      	bne.n	80009d4 <TIM1_UP_IRQHandler+0x44>
		{
			sr04_1.tim_update_count++;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <TIM1_UP_IRQHandler+0x54>)
 80009b2:	8c1b      	ldrh	r3, [r3, #32]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <TIM1_UP_IRQHandler+0x54>)
 80009ba:	841a      	strh	r2, [r3, #32]
			sr04_2.tim_update_count++;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <TIM1_UP_IRQHandler+0x58>)
 80009be:	8c1b      	ldrh	r3, [r3, #32]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <TIM1_UP_IRQHandler+0x58>)
 80009c6:	841a      	strh	r2, [r3, #32]
			sr04_3.tim_update_count++;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <TIM1_UP_IRQHandler+0x5c>)
 80009ca:	8c1b      	ldrh	r3, [r3, #32]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <TIM1_UP_IRQHandler+0x5c>)
 80009d2:	841a      	strh	r2, [r3, #32]
		}
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <TIM1_UP_IRQHandler+0x50>)
 80009d6:	f001 f94b 	bl	8001c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000028 	.word	0x20000028
 80009e4:	20000070 	.word	0x20000070
 80009e8:	20000094 	.word	0x20000094
 80009ec:	200000b8 	.word	0x200000b8

080009f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff fff8 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a02:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a04:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a18:	4c09      	ldr	r4, [pc, #36]	@ (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f001 fe5d 	bl	80026e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fb8f 	bl	800014c <main>
  bx lr
 8000a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a38:	08002770 	.word	0x08002770
  ldr r2, =_sbss
 8000a3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a40:	200000e0 	.word	0x200000e0

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_Init+0x28>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_Init+0x28>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f947 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff feac 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f95f 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 f927 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000dc 	.word	0x200000dc

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	@ (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200000dc 	.word	0x200000dc

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4906      	ldr	r1, [pc, #24]	@ (8000bec <__NVIC_EnableIRQ+0x34>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	@ 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f7ff ff90 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff2d 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff42 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff35 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b08b      	sub	sp, #44	@ 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e169      	b.n	8001058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d84:	2201      	movs	r2, #1
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8158 	bne.w	8001052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a9a      	ldr	r2, [pc, #616]	@ (8001010 <HAL_GPIO_Init+0x2a0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d05e      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dac:	4a98      	ldr	r2, [pc, #608]	@ (8001010 <HAL_GPIO_Init+0x2a0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d875      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000db2:	4a98      	ldr	r2, [pc, #608]	@ (8001014 <HAL_GPIO_Init+0x2a4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d058      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000db8:	4a96      	ldr	r2, [pc, #600]	@ (8001014 <HAL_GPIO_Init+0x2a4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d86f      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dbe:	4a96      	ldr	r2, [pc, #600]	@ (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d052      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dc4:	4a94      	ldr	r2, [pc, #592]	@ (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d869      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dca:	4a94      	ldr	r2, [pc, #592]	@ (800101c <HAL_GPIO_Init+0x2ac>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d04c      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dd0:	4a92      	ldr	r2, [pc, #584]	@ (800101c <HAL_GPIO_Init+0x2ac>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d863      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dd6:	4a92      	ldr	r2, [pc, #584]	@ (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d046      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000ddc:	4a90      	ldr	r2, [pc, #576]	@ (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d85d      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d82a      	bhi.n	8000e3c <HAL_GPIO_Init+0xcc>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d859      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dea:	a201      	add	r2, pc, #4	@ (adr r2, 8000df0 <HAL_GPIO_Init+0x80>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	08000e57 	.word	0x08000e57
 8000dfc:	08000e99 	.word	0x08000e99
 8000e00:	08000e9f 	.word	0x08000e9f
 8000e04:	08000e9f 	.word	0x08000e9f
 8000e08:	08000e9f 	.word	0x08000e9f
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000e9f 	.word	0x08000e9f
 8000e14:	08000e9f 	.word	0x08000e9f
 8000e18:	08000e9f 	.word	0x08000e9f
 8000e1c:	08000e9f 	.word	0x08000e9f
 8000e20:	08000e9f 	.word	0x08000e9f
 8000e24:	08000e9f 	.word	0x08000e9f
 8000e28:	08000e9f 	.word	0x08000e9f
 8000e2c:	08000e9f 	.word	0x08000e9f
 8000e30:	08000e9f 	.word	0x08000e9f
 8000e34:	08000e4d 	.word	0x08000e4d
 8000e38:	08000e61 	.word	0x08000e61
 8000e3c:	4a79      	ldr	r2, [pc, #484]	@ (8001024 <HAL_GPIO_Init+0x2b4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e42:	e02c      	b.n	8000e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e029      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	3304      	adds	r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e024      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e01f      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e01a      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e013      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	611a      	str	r2, [r3, #16]
          break;
 8000e8a:	e009      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	615a      	str	r2, [r3, #20]
          break;
 8000e96:	e003      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          break;
 8000e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	@ 0xff
 8000ea4:	d801      	bhi.n	8000eaa <HAL_GPIO_Init+0x13a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e001      	b.n	8000eae <HAL_GPIO_Init+0x13e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3304      	adds	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	@ 0xff
 8000eb4:	d802      	bhi.n	8000ebc <HAL_GPIO_Init+0x14c>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x152>
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	3b08      	subs	r3, #8
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	210f      	movs	r1, #15
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	6a39      	ldr	r1, [r7, #32]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 80b1 	beq.w	8001052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <HAL_GPIO_Init+0x2b8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f08:	4a48      	ldr	r2, [pc, #288]	@ (800102c <HAL_GPIO_Init+0x2bc>)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a40      	ldr	r2, [pc, #256]	@ (8001030 <HAL_GPIO_Init+0x2c0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3f      	ldr	r2, [pc, #252]	@ (8001034 <HAL_GPIO_Init+0x2c4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001038 <HAL_GPIO_Init+0x2c8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3d      	ldr	r2, [pc, #244]	@ (800103c <HAL_GPIO_Init+0x2cc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x1e0>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6e:	492f      	ldr	r1, [pc, #188]	@ (800102c <HAL_GPIO_Init+0x2bc>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	492c      	ldr	r1, [pc, #176]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f96:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4928      	ldr	r1, [pc, #160]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb0:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	4922      	ldr	r1, [pc, #136]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60cb      	str	r3, [r1, #12]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	491e      	ldr	r1, [pc, #120]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4918      	ldr	r1, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4914      	ldr	r1, [pc, #80]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d021      	beq.n	8001044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	490e      	ldr	r1, [pc, #56]	@ (8001040 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e021      	b.n	8001052 <HAL_GPIO_Init+0x2e2>
 800100e:	bf00      	nop
 8001010:	10320000 	.word	0x10320000
 8001014:	10310000 	.word	0x10310000
 8001018:	10220000 	.word	0x10220000
 800101c:	10210000 	.word	0x10210000
 8001020:	10120000 	.word	0x10120000
 8001024:	10110000 	.word	0x10110000
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000
 800103c:	40011400 	.word	0x40011400
 8001040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_GPIO_Init+0x304>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	43db      	mvns	r3, r3
 800104c:	4909      	ldr	r1, [pc, #36]	@ (8001074 <HAL_GPIO_Init+0x304>)
 800104e:	4013      	ands	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	3301      	adds	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	fa22 f303 	lsr.w	r3, r2, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	f47f ae8e 	bne.w	8000d84 <HAL_GPIO_Init+0x14>
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	372c      	adds	r7, #44	@ 0x2c
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001094:	e003      	b.n	800109e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	041a      	lsls	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	611a      	str	r2, [r3, #16]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e272      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c8:	4b92      	ldr	r3, [pc, #584]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d00c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d112      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
 80010e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ec:	d10b      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d06c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x12c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d168      	bne.n	80011d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e24c      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x76>
 8001110:	4b80      	ldr	r3, [pc, #512]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7f      	ldr	r2, [pc, #508]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b7b      	ldr	r3, [pc, #492]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a7a      	ldr	r2, [pc, #488]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0xbc>
 800114a:	4b72      	ldr	r3, [pc, #456]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001164:	4b6b      	ldr	r3, [pc, #428]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a67      	ldr	r2, [pc, #412]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fcb8 	bl	8000af8 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fcb4 	bl	8000af8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e200      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5d      	ldr	r3, [pc, #372]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fca4 	bl	8000af8 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fca0 	bl	8000af8 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1ec      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b53      	ldr	r3, [pc, #332]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x10c>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ee:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
 80011fa:	4b46      	ldr	r3, [pc, #280]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1c0      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4939      	ldr	r1, [pc, #228]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fc59 	bl	8000af8 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc55 	bl	8000af8 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4927      	ldr	r1, [pc, #156]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fc38 	bl	8000af8 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fc34 	bl	8000af8 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e180      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03a      	beq.n	800132c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_RCC_OscConfig+0x274>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc18 	bl	8000af8 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc14 	bl	8000af8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e160      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fa9c 	bl	8001828 <RCC_Delay>
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_RCC_OscConfig+0x274>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fbfe 	bl	8000af8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fbfa 	bl	8000af8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d908      	bls.n	8001320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e146      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b92      	ldr	r3, [pc, #584]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e9      	bne.n	8001300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a6 	beq.w	8001486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b8b      	ldr	r3, [pc, #556]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b88      	ldr	r3, [pc, #544]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a87      	ldr	r2, [pc, #540]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b85      	ldr	r3, [pc, #532]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b82      	ldr	r3, [pc, #520]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b7f      	ldr	r3, [pc, #508]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fbbb 	bl	8000af8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fbb7 	bl	8000af8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	@ 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e103      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b75      	ldr	r3, [pc, #468]	@ (8001570 <HAL_RCC_OscConfig+0x4c8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x312>
 80013ac:	4b6f      	ldr	r3, [pc, #444]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a6e      	ldr	r2, [pc, #440]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013c2:	4b6a      	ldr	r3, [pc, #424]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a69      	ldr	r2, [pc, #420]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b67      	ldr	r3, [pc, #412]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a66      	ldr	r2, [pc, #408]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a60      	ldr	r2, [pc, #384]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	4b5e      	ldr	r3, [pc, #376]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013fe:	4b5b      	ldr	r3, [pc, #364]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a5a      	ldr	r2, [pc, #360]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b58      	ldr	r3, [pc, #352]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a57      	ldr	r2, [pc, #348]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fb6b 	bl	8000af8 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fb67 	bl	8000af8 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0b1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x37e>
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fb55 	bl	8000af8 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fb51 	bl	8000af8 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e09b      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b40      	ldr	r3, [pc, #256]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147a:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a3b      	ldr	r2, [pc, #236]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001490:	4b36      	ldr	r3, [pc, #216]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d146      	bne.n	8001532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb25 	bl	8000af8 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fb21 	bl	8000af8 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e06d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4921      	ldr	r1, [pc, #132]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	430b      	orrs	r3, r1
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff faf5 	bl	8000af8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff faf1 	bl	8000af8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x46a>
 8001530:	e035      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fade 	bl	8000af8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fada 	bl	8000af8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e026      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x498>
 800155e:	e01e      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e019      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
 8001574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_RCC_OscConfig+0x500>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	429a      	cmp	r2, r3
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa2c 	bl	8000af8 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff fa28 	bl	8000af8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	@ (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f98a 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	08002744 	.word	0x08002744
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x30>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x36>
 80017ae:	e027      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	e027      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x94>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c5b      	lsrs	r3, r3, #17
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e004      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	613b      	str	r3, [r7, #16]
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x98>)
 8001802:	613b      	str	r3, [r7, #16]
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	693b      	ldr	r3, [r7, #16]
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	08002754 	.word	0x08002754
 8001820:	08002764 	.word	0x08002764
 8001824:	003d0900 	.word	0x003d0900

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e041      	b.n	80018fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe ffca 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f000 fc7c 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d001      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e03a      	b.n	8001992 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_TIM_Base_Start_IT+0x98>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00e      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x58>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001946:	d009      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x58>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x58>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d111      	bne.n	8001980 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d010      	beq.n	8001990 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197e:	e007      	b.n	8001990 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40000800 	.word	0x40000800

080019a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e041      	b.n	8001a3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f839 	bl	8001a46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 fbda 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <HAL_TIM_IC_Start_IT+0x1e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	e013      	b.n	8001a9e <HAL_TIM_IC_Start_IT+0x46>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d104      	bne.n	8001a86 <HAL_TIM_IC_Start_IT+0x2e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	e00b      	b.n	8001a9e <HAL_TIM_IC_Start_IT+0x46>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d104      	bne.n	8001a96 <HAL_TIM_IC_Start_IT+0x3e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	e003      	b.n	8001a9e <HAL_TIM_IC_Start_IT+0x46>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d104      	bne.n	8001ab0 <HAL_TIM_IC_Start_IT+0x58>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e013      	b.n	8001ad8 <HAL_TIM_IC_Start_IT+0x80>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d104      	bne.n	8001ac0 <HAL_TIM_IC_Start_IT+0x68>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e00b      	b.n	8001ad8 <HAL_TIM_IC_Start_IT+0x80>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d104      	bne.n	8001ad0 <HAL_TIM_IC_Start_IT+0x78>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e003      	b.n	8001ad8 <HAL_TIM_IC_Start_IT+0x80>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0b8      	b.n	8001c5c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_TIM_IC_Start_IT+0xa2>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001af8:	e013      	b.n	8001b22 <HAL_TIM_IC_Start_IT+0xca>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d104      	bne.n	8001b0a <HAL_TIM_IC_Start_IT+0xb2>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b08:	e00b      	b.n	8001b22 <HAL_TIM_IC_Start_IT+0xca>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_IC_Start_IT+0xc2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b18:	e003      	b.n	8001b22 <HAL_TIM_IC_Start_IT+0xca>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_IC_Start_IT+0xda>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b30:	e013      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x102>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_IC_Start_IT+0xea>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b40:	e00b      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x102>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_IC_Start_IT+0xfa>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b50:	e003      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x102>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d841      	bhi.n	8001be4 <HAL_TIM_IC_Start_IT+0x18c>
 8001b60:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <HAL_TIM_IC_Start_IT+0x110>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b9d 	.word	0x08001b9d
 8001b6c:	08001be5 	.word	0x08001be5
 8001b70:	08001be5 	.word	0x08001be5
 8001b74:	08001be5 	.word	0x08001be5
 8001b78:	08001baf 	.word	0x08001baf
 8001b7c:	08001be5 	.word	0x08001be5
 8001b80:	08001be5 	.word	0x08001be5
 8001b84:	08001be5 	.word	0x08001be5
 8001b88:	08001bc1 	.word	0x08001bc1
 8001b8c:	08001be5 	.word	0x08001be5
 8001b90:	08001be5 	.word	0x08001be5
 8001b94:	08001be5 	.word	0x08001be5
 8001b98:	08001bd3 	.word	0x08001bd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0202 	orr.w	r2, r2, #2
 8001baa:	60da      	str	r2, [r3, #12]
      break;
 8001bac:	e01d      	b.n	8001bea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0204 	orr.w	r2, r2, #4
 8001bbc:	60da      	str	r2, [r3, #12]
      break;
 8001bbe:	e014      	b.n	8001bea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	60da      	str	r2, [r3, #12]
      break;
 8001bd0:	e00b      	b.n	8001bea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0210 	orr.w	r2, r2, #16
 8001be0:	60da      	str	r2, [r3, #12]
      break;
 8001be2:	e002      	b.n	8001bea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      break;
 8001be8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d134      	bne.n	8001c5a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fcd6 	bl	80025aa <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a18      	ldr	r2, [pc, #96]	@ (8001c64 <HAL_TIM_IC_Start_IT+0x20c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00e      	beq.n	8001c26 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c10:	d009      	beq.n	8001c26 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <HAL_TIM_IC_Start_IT+0x210>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_TIM_IC_Start_IT+0x1ce>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <HAL_TIM_IC_Start_IT+0x214>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d111      	bne.n	8001c4a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d010      	beq.n	8001c5a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c48:	e007      	b.n	8001c5a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800

08001c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d122      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d11b      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0202 	mvn.w	r2, #2
 8001c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa59 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa4c 	bl	8002158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa5b 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0204 	mvn.w	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa2f 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa22 	bl	8002158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fa31 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0208 	mvn.w	r2, #8
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa05 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f9f8 	bl	8002158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fa07 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f9db 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f9ce 	bl	8002158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f9dd 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f9a9 	bl	8002146 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	2b80      	cmp	r3, #128	@ 0x80
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	2b80      	cmp	r3, #128	@ 0x80
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fc51 	bl	80026c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f9a1 	bl	800218e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fc1c 	bl	80026b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e088      	b.n	8001fb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001ebc:	f000 f9d2 	bl	8002264 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 020c 	bic.w	r2, r2, #12
 8001ece:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e060      	b.n	8001fa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d11c      	bne.n	8001f24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001efa:	f000 fa3b 	bl	8002374 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001f0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6999      	ldr	r1, [r3, #24]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	021a      	lsls	r2, r3, #8
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	e040      	b.n	8001fa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11b      	bne.n	8001f62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001f3a:	f000 fa86 	bl	800244a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020c 	bic.w	r2, r2, #12
 8001f4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69d9      	ldr	r1, [r3, #28]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
 8001f60:	e021      	b.n	8001fa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d11c      	bne.n	8001fa2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001f78:	f000 faa2 	bl	80024c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001f8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69d9      	ldr	r1, [r3, #28]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	61da      	str	r2, [r3, #28]
 8001fa0:	e001      	b.n	8001fa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0b4      	b.n	800213e <HAL_TIM_ConfigClockSource+0x186>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800200c:	d03e      	beq.n	800208c <HAL_TIM_ConfigClockSource+0xd4>
 800200e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002012:	f200 8087 	bhi.w	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800201a:	f000 8086 	beq.w	800212a <HAL_TIM_ConfigClockSource+0x172>
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002022:	d87f      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b70      	cmp	r3, #112	@ 0x70
 8002026:	d01a      	beq.n	800205e <HAL_TIM_ConfigClockSource+0xa6>
 8002028:	2b70      	cmp	r3, #112	@ 0x70
 800202a:	d87b      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b60      	cmp	r3, #96	@ 0x60
 800202e:	d050      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002030:	2b60      	cmp	r3, #96	@ 0x60
 8002032:	d877      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b50      	cmp	r3, #80	@ 0x50
 8002036:	d03c      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002038:	2b50      	cmp	r3, #80	@ 0x50
 800203a:	d873      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b40      	cmp	r3, #64	@ 0x40
 800203e:	d058      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002040:	2b40      	cmp	r3, #64	@ 0x40
 8002042:	d86f      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b30      	cmp	r3, #48	@ 0x30
 8002046:	d064      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x15a>
 8002048:	2b30      	cmp	r3, #48	@ 0x30
 800204a:	d86b      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b20      	cmp	r3, #32
 800204e:	d060      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b20      	cmp	r3, #32
 8002052:	d867      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05c      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x15a>
 8002058:	2b10      	cmp	r3, #16
 800205a:	d05a      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x15a>
 800205c:	e062      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800206e:	f000 fa7d 	bl	800256c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	609a      	str	r2, [r3, #8]
      break;
 800208a:	e04f      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800209c:	f000 fa66 	bl	800256c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ae:	609a      	str	r2, [r3, #8]
      break;
 80020b0:	e03c      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020be:	461a      	mov	r2, r3
 80020c0:	f000 f92a 	bl	8002318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2150      	movs	r1, #80	@ 0x50
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fa34 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 80020d0:	e02c      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 f984 	bl	80023ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2160      	movs	r1, #96	@ 0x60
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fa24 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 80020f0:	e01c      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 f90a 	bl	8002318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	@ 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fa14 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 8002110:	e00c      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 fa0b 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 8002122:	e003      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e000      	b.n	800212c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800212a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <TIM_Base_SetConfig+0xb8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <TIM_Base_SetConfig+0x30>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x30>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a26      	ldr	r2, [pc, #152]	@ (800225c <TIM_Base_SetConfig+0xbc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x30>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <TIM_Base_SetConfig+0xc0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <TIM_Base_SetConfig+0xb8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <TIM_Base_SetConfig+0xbc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <TIM_Base_SetConfig+0xc0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <TIM_Base_SetConfig+0xb8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800

08002264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0201 	bic.w	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a1f      	ldr	r2, [pc, #124]	@ (800230c <TIM_TI1_SetConfig+0xa8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_TI1_SetConfig+0x46>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d007      	beq.n	80022aa <TIM_TI1_SetConfig+0x46>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a1c      	ldr	r2, [pc, #112]	@ (8002310 <TIM_TI1_SetConfig+0xac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_TI1_SetConfig+0x46>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <TIM_TI1_SetConfig+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <TIM_TI1_SetConfig+0x4a>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <TIM_TI1_SetConfig+0x4c>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e003      	b.n	80022ce <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f023 030a 	bic.w	r3, r3, #10
 80022e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 030a 	and.w	r3, r3, #10
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	621a      	str	r2, [r3, #32]
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800

08002318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f023 0201 	bic.w	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f023 030a 	bic.w	r3, r3, #10
 8002354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 0210 	bic.w	r2, r3, #16
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	031b      	lsls	r3, r3, #12
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	621a      	str	r2, [r3, #32]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0210 	bic.w	r2, r3, #16
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	031b      	lsls	r3, r3, #12
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002428:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	b2db      	uxtb	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800249a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	621a      	str	r2, [r3, #32]
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	031b      	lsls	r3, r3, #12
 8002504:	b29b      	uxth	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002512:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	f043 0307 	orr.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	021a      	lsls	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	431a      	orrs	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	609a      	str	r2, [r3, #8]
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b087      	sub	sp, #28
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2201      	movs	r2, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	401a      	ands	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1a      	ldr	r2, [r3, #32]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002608:	2302      	movs	r3, #2
 800260a:	e046      	b.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a16      	ldr	r2, [pc, #88]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002658:	d009      	beq.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10c      	bne.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4313      	orrs	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800

080026b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <memset>:
 80026d4:	4603      	mov	r3, r0
 80026d6:	4402      	add	r2, r0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d100      	bne.n	80026de <memset+0xa>
 80026dc:	4770      	bx	lr
 80026de:	f803 1b01 	strb.w	r1, [r3], #1
 80026e2:	e7f9      	b.n	80026d8 <memset+0x4>

080026e4 <__libc_init_array>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	2600      	movs	r6, #0
 80026e8:	4d0c      	ldr	r5, [pc, #48]	@ (800271c <__libc_init_array+0x38>)
 80026ea:	4c0d      	ldr	r4, [pc, #52]	@ (8002720 <__libc_init_array+0x3c>)
 80026ec:	1b64      	subs	r4, r4, r5
 80026ee:	10a4      	asrs	r4, r4, #2
 80026f0:	42a6      	cmp	r6, r4
 80026f2:	d109      	bne.n	8002708 <__libc_init_array+0x24>
 80026f4:	f000 f81a 	bl	800272c <_init>
 80026f8:	2600      	movs	r6, #0
 80026fa:	4d0a      	ldr	r5, [pc, #40]	@ (8002724 <__libc_init_array+0x40>)
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <__libc_init_array+0x44>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	42a6      	cmp	r6, r4
 8002704:	d105      	bne.n	8002712 <__libc_init_array+0x2e>
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	f855 3b04 	ldr.w	r3, [r5], #4
 800270c:	4798      	blx	r3
 800270e:	3601      	adds	r6, #1
 8002710:	e7ee      	b.n	80026f0 <__libc_init_array+0xc>
 8002712:	f855 3b04 	ldr.w	r3, [r5], #4
 8002716:	4798      	blx	r3
 8002718:	3601      	adds	r6, #1
 800271a:	e7f2      	b.n	8002702 <__libc_init_array+0x1e>
 800271c:	08002768 	.word	0x08002768
 8002720:	08002768 	.word	0x08002768
 8002724:	08002768 	.word	0x08002768
 8002728:	0800276c 	.word	0x0800276c

0800272c <_init>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr

08002738 <_fini>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	bf00      	nop
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr
